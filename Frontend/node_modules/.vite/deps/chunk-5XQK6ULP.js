import {
  createHash
} from "./chunk-WQM4IR34.js";
import {
  stringToBase64urlString
} from "./chunk-N6237SYY.js";
import {
  AuthenticatorTransportProtocol,
  DeferredPromise,
  DynamicError,
  LogLevel,
  Logger,
  PlatformService,
  RequestChannelNotHandledError,
  WalletConnectorBase,
  assertPackageVersion,
  getTLD
} from "./chunk-PQECYILG.js";
import {
  __commonJS,
  __esm,
  __export,
  __toESM
} from "./chunk-ONY6HBPH.js";

// node_modules/@turnkey/http/node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "node_modules/@turnkey/http/node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
    var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global !== "undefined" && global;
    var __globalThis__ = function() {
      function F() {
        this.fetch = false;
        this.DOMException = __global__.DOMException;
      }
      F.prototype = __global__;
      return new F();
    }();
    (function(globalThis2) {
      var irrelevant = function(exports2) {
        var g = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
        typeof global !== "undefined" && global || {};
        var support = {
          searchParams: "URLSearchParams" in g,
          iterable: "Symbol" in g && "iterator" in Symbol,
          blob: "FileReader" in g && "Blob" in g && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in g,
          arrayBuffer: "ArrayBuffer" in g
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView2 = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
            throw new TypeError('Invalid character in header field name: "' + name + '"');
          }
          return name.toLowerCase();
        }
        function normalizeValue2(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator3 = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator3[Symbol.iterator] = function() {
              return iterator3;
            };
          }
          return iterator3;
        }
        function Headers(headers) {
          this.map = {};
          if (headers instanceof Headers) {
            headers.forEach(function(value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              if (header.length != 2) {
                throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
              }
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers.prototype.append = function(name, value) {
          name = normalizeName(name);
          value = normalizeValue2(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue2(value);
        };
        Headers.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        }
        function consumed(body) {
          if (body._noBody) return;
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
          var encoding = match ? match[1] : "utf-8";
          reader.readAsText(blob, encoding);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
              this._noBody = true;
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView2(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
          }
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              var isConsumed = consumed(this);
              if (isConsumed) {
                return isConsumed;
              } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                return Promise.resolve(
                  this._bodyArrayBuffer.buffer.slice(
                    this._bodyArrayBuffer.byteOffset,
                    this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                  )
                );
              } else {
                return Promise.resolve(this._bodyArrayBuffer);
              }
            } else if (support.blob) {
              return this.blob().then(readBlobAsArrayBuffer);
            } else {
              throw new Error("could not read as ArrayBuffer");
            }
          };
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request2(input, options) {
          if (!(this instanceof Request2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          options = options || {};
          var body = options.body;
          if (input instanceof Request2) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal || function() {
            if ("AbortController" in g) {
              var ctrl = new AbortController();
              return ctrl.signal;
            }
          }();
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
          if (this.method === "GET" || this.method === "HEAD") {
            if (options.cache === "no-store" || options.cache === "no-cache") {
              var reParamSearch = /([?&])_=[^&]*/;
              if (reParamSearch.test(this.url)) {
                this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
              } else {
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
              }
            }
          }
        }
        Request2.prototype.clone = function() {
          return new Request2(this, { body: this._bodyInit });
        };
        function decode(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split("\r").map(function(header) {
            return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
          }).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              try {
                headers.append(key, value);
              } catch (error) {
                console.warn("Response " + error.message);
              }
            }
          });
          return headers;
        }
        Body.call(Request2.prototype);
        function Response2(bodyInit, options) {
          if (!(this instanceof Response2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
          }
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
          this.headers = new Headers(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response2.prototype);
        Response2.prototype.clone = function() {
          return new Response2(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          });
        };
        Response2.error = function() {
          var response = new Response2(null, { status: 200, statusText: "" });
          response.ok = false;
          response.status = 0;
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response2.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response2(null, { status, headers: { location: url } });
        };
        exports2.DOMException = g.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch3(input, init2) {
          return new Promise(function(resolve, reject) {
            var request2 = new Request2(input, init2);
            if (request2.signal && request2.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              if (request2.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
                options.status = 200;
              } else {
                options.status = xhr.status;
              }
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              setTimeout(function() {
                resolve(new Response2(body, options));
              }, 0);
            };
            xhr.onerror = function() {
              setTimeout(function() {
                reject(new TypeError("Network request failed"));
              }, 0);
            };
            xhr.ontimeout = function() {
              setTimeout(function() {
                reject(new TypeError("Network request timed out"));
              }, 0);
            };
            xhr.onabort = function() {
              setTimeout(function() {
                reject(new exports2.DOMException("Aborted", "AbortError"));
              }, 0);
            };
            function fixUrl(url) {
              try {
                return url === "" && g.location.href ? g.location.href : url;
              } catch (e) {
                return url;
              }
            }
            xhr.open(request2.method, fixUrl(request2.url), true);
            if (request2.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request2.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr) {
              if (support.blob) {
                xhr.responseType = "blob";
              } else if (support.arrayBuffer) {
                xhr.responseType = "arraybuffer";
              }
            }
            if (init2 && typeof init2.headers === "object" && !(init2.headers instanceof Headers || g.Headers && init2.headers instanceof g.Headers)) {
              var names = [];
              Object.getOwnPropertyNames(init2.headers).forEach(function(name) {
                names.push(normalizeName(name));
                xhr.setRequestHeader(name, normalizeValue2(init2.headers[name]));
              });
              request2.headers.forEach(function(value, name) {
                if (names.indexOf(name) === -1) {
                  xhr.setRequestHeader(name, value);
                }
              });
            } else {
              request2.headers.forEach(function(value, name) {
                xhr.setRequestHeader(name, value);
              });
            }
            if (request2.signal) {
              request2.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request2.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request2._bodyInit === "undefined" ? null : request2._bodyInit);
          });
        }
        fetch3.polyfill = true;
        if (!g.fetch) {
          g.fetch = fetch3;
          g.Headers = Headers;
          g.Request = Request2;
          g.Response = Response2;
        }
        exports2.Headers = Headers;
        exports2.Request = Request2;
        exports2.Response = Response2;
        exports2.fetch = fetch3;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(__globalThis__);
    __globalThis__.fetch.ponyfill = true;
    delete __globalThis__.fetch.polyfill;
    var ctx = __global__.fetch ? __global__ : __globalThis__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
  }
});

// browser-external:buffer
var require_buffer = __commonJS({
  "browser-external:buffer"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "buffer" has been externalized for browser compatibility. Cannot access "buffer.${key}" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default2;
var init_regex = __esm({
  "node_modules/uuid/dist/esm-browser/regex.js"() {
    regex_default2 = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/uuid/dist/esm-browser/validate.js
function validate2(uuid) {
  return typeof uuid === "string" && regex_default2.test(uuid);
}
var validate_default2;
var init_validate = __esm({
  "node_modules/uuid/dist/esm-browser/validate.js"() {
    init_regex();
    validate_default2 = validate2;
  }
});

// node_modules/uuid/dist/esm-browser/rng.js
function rng2() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds82);
}
var getRandomValues, rnds82;
var init_rng = __esm({
  "node_modules/uuid/dist/esm-browser/rng.js"() {
    rnds82 = new Uint8Array(16);
  }
});

// node_modules/uuid/dist/esm-browser/stringify.js
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex2[arr[offset + 0]] + byteToHex2[arr[offset + 1]] + byteToHex2[arr[offset + 2]] + byteToHex2[arr[offset + 3]] + "-" + byteToHex2[arr[offset + 4]] + byteToHex2[arr[offset + 5]] + "-" + byteToHex2[arr[offset + 6]] + byteToHex2[arr[offset + 7]] + "-" + byteToHex2[arr[offset + 8]] + byteToHex2[arr[offset + 9]] + "-" + byteToHex2[arr[offset + 10]] + byteToHex2[arr[offset + 11]] + byteToHex2[arr[offset + 12]] + byteToHex2[arr[offset + 13]] + byteToHex2[arr[offset + 14]] + byteToHex2[arr[offset + 15]]).toLowerCase();
  if (!validate_default2(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex2, i, stringify_default2;
var init_stringify = __esm({
  "node_modules/uuid/dist/esm-browser/stringify.js"() {
    init_validate();
    byteToHex2 = [];
    for (i = 0; i < 256; ++i) {
      byteToHex2.push((i + 256).toString(16).substr(1));
    }
    stringify_default2 = stringify;
  }
});

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng2)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default2(rnds);
}
var v4_default2;
var init_v4 = __esm({
  "node_modules/uuid/dist/esm-browser/v4.js"() {
    init_rng();
    init_stringify();
    v4_default2 = v4;
  }
});

// node_modules/uuid/dist/esm-browser/v1.js
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || rng2)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  var msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  var tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default2(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default2;
var init_v1 = __esm({
  "node_modules/uuid/dist/esm-browser/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default2 = v1;
  }
});

// node_modules/uuid/dist/esm-browser/parse.js
function parse2(uuid) {
  if (!validate_default2(uuid)) {
    throw TypeError("Invalid UUID");
  }
  var v;
  var arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default2;
var init_parse = __esm({
  "node_modules/uuid/dist/esm-browser/parse.js"() {
    init_validate();
    parse_default2 = parse2;
  }
});

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes2(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = [];
  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version6, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes2(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default2(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version6;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default2(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS2;
  generateUUID.URL = URL3;
  return generateUUID;
}
var DNS2, URL3;
var init_v35 = __esm({
  "node_modules/uuid/dist/esm-browser/v35.js"() {
    init_stringify();
    init_parse();
    DNS2 = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL3 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/uuid/dist/esm-browser/md5.js
function md52(bytes) {
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd52(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = "0123456789abcdef";
  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 255;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength2(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd52(x, len) {
  x[len >> 5] |= 128 << len % 32;
  x[getOutputLength2(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;
  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff2(a, b, c, d, x[i], 7, -680876936);
    d = md5ff2(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff2(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff2(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff2(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff2(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff2(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff2(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff2(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff2(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff2(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff2(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff2(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff2(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff2(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff2(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg2(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg2(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg2(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg2(b, c, d, a, x[i], 20, -373897302);
    a = md5gg2(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg2(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg2(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg2(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg2(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg2(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg2(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg2(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg2(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg2(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg2(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg2(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh2(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh2(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh2(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh2(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh2(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh2(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh2(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh2(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh2(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh2(d, a, b, c, x[i], 11, -358537222);
    c = md5hh2(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh2(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh2(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh2(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh2(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh2(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii2(a, b, c, d, x[i], 6, -198630844);
    d = md5ii2(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii2(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii2(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii2(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii2(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii2(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii2(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii2(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii2(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii2(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii2(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii2(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii2(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii2(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii2(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd2(a, olda);
    b = safeAdd2(b, oldb);
    c = safeAdd2(c, oldc);
    d = safeAdd2(d, oldd);
  }
  return [a, b, c, d];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength2(length8));
  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 255) << i % 32;
  }
  return output;
}
function safeAdd2(x, y) {
  var lsw = (x & 65535) + (y & 65535);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft2(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn2(q, a, b, x, s, t) {
  return safeAdd2(bitRotateLeft2(safeAdd2(safeAdd2(a, q), safeAdd2(x, t)), s), b);
}
function md5ff2(a, b, c, d, x, s, t) {
  return md5cmn2(b & c | ~b & d, a, b, x, s, t);
}
function md5gg2(a, b, c, d, x, s, t) {
  return md5cmn2(b & d | c & ~d, a, b, x, s, t);
}
function md5hh2(a, b, c, d, x, s, t) {
  return md5cmn2(b ^ c ^ d, a, b, x, s, t);
}
function md5ii2(a, b, c, d, x, s, t) {
  return md5cmn2(c ^ (b | ~d), a, b, x, s, t);
}
var md5_default2;
var init_md5 = __esm({
  "node_modules/uuid/dist/esm-browser/md5.js"() {
    md5_default2 = md52;
  }
});

// node_modules/uuid/dist/esm-browser/v3.js
var v32, v3_default2;
var init_v3 = __esm({
  "node_modules/uuid/dist/esm-browser/v3.js"() {
    init_v35();
    init_md5();
    v32 = v35_default("v3", 48, md5_default2);
    v3_default2 = v32;
  }
});

// node_modules/uuid/dist/esm-browser/sha1.js
function f2(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL2(x, n) {
  return x << n | x >>> 32 - n;
}
function sha12(bytes) {
  var K = [1518500249, 1859775393, 2400959708, 3395469782];
  var H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);
  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);
    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }
    M[_i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);
    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }
    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL2(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }
    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];
    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL2(a, 5) + f2(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL2(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default2;
var init_sha1 = __esm({
  "node_modules/uuid/dist/esm-browser/sha1.js"() {
    sha1_default2 = sha12;
  }
});

// node_modules/uuid/dist/esm-browser/v5.js
var v52, v5_default2;
var init_v5 = __esm({
  "node_modules/uuid/dist/esm-browser/v5.js"() {
    init_v35();
    init_sha1();
    v52 = v35_default("v5", 80, sha1_default2);
    v5_default2 = v52;
  }
});

// node_modules/uuid/dist/esm-browser/nil.js
var nil_default2;
var init_nil = __esm({
  "node_modules/uuid/dist/esm-browser/nil.js"() {
    nil_default2 = "00000000-0000-0000-0000-000000000000";
  }
});

// node_modules/uuid/dist/esm-browser/version.js
function version5(uuid) {
  if (!validate_default2(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default2;
var init_version = __esm({
  "node_modules/uuid/dist/esm-browser/version.js"() {
    init_validate();
    version_default2 = version5;
  }
});

// node_modules/uuid/dist/esm-browser/index.js
var esm_browser_exports = {};
__export(esm_browser_exports, {
  NIL: () => nil_default2,
  parse: () => parse_default2,
  stringify: () => stringify_default2,
  v1: () => v1_default2,
  v3: () => v3_default2,
  v4: () => v4_default2,
  v5: () => v5_default2,
  validate: () => validate_default2,
  version: () => version_default2
});
var init_esm_browser = __esm({
  "node_modules/uuid/dist/esm-browser/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/@dynamic-labs/embedded-wallet/src/types.js
var TurnkeyWalletConnectorInfo = {
  Turnkey: {
    key: "turnkey",
    name: "Turnkey"
  },
  TurnkeyHD: {
    key: "turnkeyhd",
    name: "Turnkey HD"
  }
};

// node_modules/@dynamic-labs/embedded-wallet/package.js
var version = "4.20.9";

// node_modules/@dynamic-labs/embedded-wallet/_virtual/_tslib.js
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __classPrivateFieldGet(receiver, state, kind, f3) {
  if (kind === "a" && !f3) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f3 : kind === "a" ? f3.call(receiver) : f3 ? f3.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f3) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f3) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f3.call(receiver, value) : f3 ? f3.value = value : state.set(receiver, value), value;
}

// node_modules/@turnkey/api-key-stamper/dist/index.mjs
var stampHeaderName = "X-Stamp";
var isCryptoEnabledBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof crypto !== "undefined" && typeof crypto.subtle !== "undefined";
var isNode = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
var signWithApiKey = async (input) => {
  if (isCryptoEnabledBrowser) {
    const fn = await import("./webcrypto-5ONRM5EC.js").then((m) => m.signWithApiKey);
    return fn(input);
  } else if (isNode) {
    const fn = await import("./nodecrypto-GDR5KMZD.js").then((m) => m.signWithApiKey);
    return fn(input);
  } else {
    const fn = await import("./purejs-DRIINQFZ.js").then((m) => m.signWithApiKey);
    return fn(input);
  }
};
var ApiKeyStamper = class {
  constructor(config) {
    this.apiPublicKey = config.apiPublicKey;
    this.apiPrivateKey = config.apiPrivateKey;
  }
  async stamp(payload) {
    const signature = await signWithApiKey({
      publicKey: this.apiPublicKey,
      privateKey: this.apiPrivateKey,
      content: payload
    });
    const stamp = {
      publicKey: this.apiPublicKey,
      scheme: "SIGNATURE_SCHEME_TK_API_P256",
      signature
    };
    return {
      stampHeaderName,
      stampHeaderValue: stringToBase64urlString(JSON.stringify(stamp))
    };
  }
};

// node_modules/@turnkey/http/dist/universal.mjs
var import_cross_fetch = __toESM(require_browser_ponyfill(), 1);
var fetch2 = import_cross_fetch.fetch;

// node_modules/@turnkey/http/dist/webauthn-json/convert.mjs
var copyValue = "copy";
var convertValue = "convert";
function derived(schema, derive) {
  return {
    required: true,
    schema,
    derive
  };
}
function required(schema) {
  return {
    required: true,
    schema
  };
}
function optional(schema) {
  return {
    required: false,
    schema
  };
}

// node_modules/@turnkey/http/dist/webauthn-json/schema.mjs
var simplifiedClientExtensionResultsSchema = {
  appid: optional(copyValue),
  appidExclude: optional(copyValue),
  credProps: optional(copyValue)
};
var publicKeyCredentialWithAttestation = {
  type: required(copyValue),
  id: required(copyValue),
  rawId: required(convertValue),
  authenticatorAttachment: optional(copyValue),
  response: required({
    clientDataJSON: required(convertValue),
    attestationObject: required(convertValue),
    transports: derived(copyValue, (response) => {
      var _a2;
      return ((_a2 = response.getTransports) == null ? void 0 : _a2.call(response)) || [];
    })
  }),
  clientExtensionResults: derived(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults())
};
var publicKeyCredentialWithAssertion = {
  type: required(copyValue),
  id: required(copyValue),
  rawId: required(convertValue),
  authenticatorAttachment: optional(copyValue),
  response: required({
    clientDataJSON: required(convertValue),
    authenticatorData: required(convertValue),
    signature: required(convertValue),
    userHandle: required(convertValue)
  }),
  clientExtensionResults: derived(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults())
};

// node_modules/@turnkey/http/dist/webauthn.mjs
var defaultTimeout = 5 * 60 * 1e3;

// node_modules/@turnkey/http/dist/base.mjs
var TurnkeyRequestError = class extends Error {
  constructor(input) {
    let turnkeyErrorMessage = `Turnkey error ${input.code}: ${input.message}`;
    if (input.details != null) {
      turnkeyErrorMessage += ` (Details: ${JSON.stringify(input.details)})`;
    }
    super(turnkeyErrorMessage);
    this.name = "TurnkeyRequestError";
    this.details = input.details ?? null;
    this.code = input.code;
  }
};

// node_modules/@turnkey/http/dist/version.mjs
var VERSION = "@turnkey/http@2.15.0";

// node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs
var TurnkeyClient = class {
  constructor(config, stamper) {
    this.getActivity = async (input) => {
      return this.request("/public/v1/query/get_activity", input);
    };
    this.stampGetActivity = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/get_activity";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getApiKey = async (input) => {
      return this.request("/public/v1/query/get_api_key", input);
    };
    this.stampGetApiKey = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/get_api_key";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getApiKeys = async (input) => {
      return this.request("/public/v1/query/get_api_keys", input);
    };
    this.stampGetApiKeys = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/get_api_keys";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getAttestationDocument = async (input) => {
      return this.request("/public/v1/query/get_attestation", input);
    };
    this.stampGetAttestationDocument = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/get_attestation";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getAuthenticator = async (input) => {
      return this.request("/public/v1/query/get_authenticator", input);
    };
    this.stampGetAuthenticator = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/get_authenticator";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getAuthenticators = async (input) => {
      return this.request("/public/v1/query/get_authenticators", input);
    };
    this.stampGetAuthenticators = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/get_authenticators";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getOauthProviders = async (input) => {
      return this.request("/public/v1/query/get_oauth_providers", input);
    };
    this.stampGetOauthProviders = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/get_oauth_providers";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getOrganization = async (input) => {
      return this.request("/public/v1/query/get_organization", input);
    };
    this.stampGetOrganization = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/get_organization";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getOrganizationConfigs = async (input) => {
      return this.request("/public/v1/query/get_organization_configs", input);
    };
    this.stampGetOrganizationConfigs = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/get_organization_configs";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getPolicy = async (input) => {
      return this.request("/public/v1/query/get_policy", input);
    };
    this.stampGetPolicy = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/get_policy";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getPrivateKey = async (input) => {
      return this.request("/public/v1/query/get_private_key", input);
    };
    this.stampGetPrivateKey = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/get_private_key";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getUser = async (input) => {
      return this.request("/public/v1/query/get_user", input);
    };
    this.stampGetUser = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/get_user";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getWallet = async (input) => {
      return this.request("/public/v1/query/get_wallet", input);
    };
    this.stampGetWallet = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/get_wallet";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getActivities = async (input) => {
      return this.request("/public/v1/query/list_activities", input);
    };
    this.stampGetActivities = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/list_activities";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getPolicies = async (input) => {
      return this.request("/public/v1/query/list_policies", input);
    };
    this.stampGetPolicies = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/list_policies";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.listPrivateKeyTags = async (input) => {
      return this.request("/public/v1/query/list_private_key_tags", input);
    };
    this.stampListPrivateKeyTags = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/list_private_key_tags";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getPrivateKeys = async (input) => {
      return this.request("/public/v1/query/list_private_keys", input);
    };
    this.stampGetPrivateKeys = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/list_private_keys";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getSubOrgIds = async (input) => {
      return this.request("/public/v1/query/list_suborgs", input);
    };
    this.stampGetSubOrgIds = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/list_suborgs";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.listUserTags = async (input) => {
      return this.request("/public/v1/query/list_user_tags", input);
    };
    this.stampListUserTags = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/list_user_tags";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getUsers = async (input) => {
      return this.request("/public/v1/query/list_users", input);
    };
    this.stampGetUsers = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/list_users";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getWalletAccounts = async (input) => {
      return this.request("/public/v1/query/list_wallet_accounts", input);
    };
    this.stampGetWalletAccounts = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/list_wallet_accounts";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getWallets = async (input) => {
      return this.request("/public/v1/query/list_wallets", input);
    };
    this.stampGetWallets = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/list_wallets";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.getWhoami = async (input) => {
      return this.request("/public/v1/query/whoami", input);
    };
    this.stampGetWhoami = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/query/whoami";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.approveActivity = async (input) => {
      return this.request("/public/v1/submit/approve_activity", input);
    };
    this.stampApproveActivity = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/approve_activity";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.createApiKeys = async (input) => {
      return this.request("/public/v1/submit/create_api_keys", input);
    };
    this.stampCreateApiKeys = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/create_api_keys";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.createApiOnlyUsers = async (input) => {
      return this.request("/public/v1/submit/create_api_only_users", input);
    };
    this.stampCreateApiOnlyUsers = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/create_api_only_users";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.createAuthenticators = async (input) => {
      return this.request("/public/v1/submit/create_authenticators", input);
    };
    this.stampCreateAuthenticators = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/create_authenticators";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.createInvitations = async (input) => {
      return this.request("/public/v1/submit/create_invitations", input);
    };
    this.stampCreateInvitations = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/create_invitations";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.createOauthProviders = async (input) => {
      return this.request("/public/v1/submit/create_oauth_providers", input);
    };
    this.stampCreateOauthProviders = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/create_oauth_providers";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.createPolicies = async (input) => {
      return this.request("/public/v1/submit/create_policies", input);
    };
    this.stampCreatePolicies = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/create_policies";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.createPolicy = async (input) => {
      return this.request("/public/v1/submit/create_policy", input);
    };
    this.stampCreatePolicy = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/create_policy";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.createPrivateKeyTag = async (input) => {
      return this.request("/public/v1/submit/create_private_key_tag", input);
    };
    this.stampCreatePrivateKeyTag = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/create_private_key_tag";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.createPrivateKeys = async (input) => {
      return this.request("/public/v1/submit/create_private_keys", input);
    };
    this.stampCreatePrivateKeys = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/create_private_keys";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.createReadOnlySession = async (input) => {
      return this.request("/public/v1/submit/create_read_only_session", input);
    };
    this.stampCreateReadOnlySession = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/create_read_only_session";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.createReadWriteSession = async (input) => {
      return this.request("/public/v1/submit/create_read_write_session", input);
    };
    this.stampCreateReadWriteSession = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/create_read_write_session";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.createSubOrganization = async (input) => {
      return this.request("/public/v1/submit/create_sub_organization", input);
    };
    this.stampCreateSubOrganization = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/create_sub_organization";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.createUserTag = async (input) => {
      return this.request("/public/v1/submit/create_user_tag", input);
    };
    this.stampCreateUserTag = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/create_user_tag";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.createUsers = async (input) => {
      return this.request("/public/v1/submit/create_users", input);
    };
    this.stampCreateUsers = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/create_users";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.createWallet = async (input) => {
      return this.request("/public/v1/submit/create_wallet", input);
    };
    this.stampCreateWallet = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/create_wallet";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.createWalletAccounts = async (input) => {
      return this.request("/public/v1/submit/create_wallet_accounts", input);
    };
    this.stampCreateWalletAccounts = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/create_wallet_accounts";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.deleteApiKeys = async (input) => {
      return this.request("/public/v1/submit/delete_api_keys", input);
    };
    this.stampDeleteApiKeys = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_api_keys";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.deleteAuthenticators = async (input) => {
      return this.request("/public/v1/submit/delete_authenticators", input);
    };
    this.stampDeleteAuthenticators = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_authenticators";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.deleteInvitation = async (input) => {
      return this.request("/public/v1/submit/delete_invitation", input);
    };
    this.stampDeleteInvitation = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_invitation";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.deleteOauthProviders = async (input) => {
      return this.request("/public/v1/submit/delete_oauth_providers", input);
    };
    this.stampDeleteOauthProviders = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_oauth_providers";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.deletePolicy = async (input) => {
      return this.request("/public/v1/submit/delete_policy", input);
    };
    this.stampDeletePolicy = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_policy";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.deletePrivateKeyTags = async (input) => {
      return this.request("/public/v1/submit/delete_private_key_tags", input);
    };
    this.stampDeletePrivateKeyTags = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_private_key_tags";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.deletePrivateKeys = async (input) => {
      return this.request("/public/v1/submit/delete_private_keys", input);
    };
    this.stampDeletePrivateKeys = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_private_keys";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.deleteSubOrganization = async (input) => {
      return this.request("/public/v1/submit/delete_sub_organization", input);
    };
    this.stampDeleteSubOrganization = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_sub_organization";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.deleteUserTags = async (input) => {
      return this.request("/public/v1/submit/delete_user_tags", input);
    };
    this.stampDeleteUserTags = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_user_tags";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.deleteUsers = async (input) => {
      return this.request("/public/v1/submit/delete_users", input);
    };
    this.stampDeleteUsers = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_users";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.deleteWallets = async (input) => {
      return this.request("/public/v1/submit/delete_wallets", input);
    };
    this.stampDeleteWallets = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_wallets";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.emailAuth = async (input) => {
      return this.request("/public/v1/submit/email_auth", input);
    };
    this.stampEmailAuth = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/email_auth";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.exportPrivateKey = async (input) => {
      return this.request("/public/v1/submit/export_private_key", input);
    };
    this.stampExportPrivateKey = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/export_private_key";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.exportWallet = async (input) => {
      return this.request("/public/v1/submit/export_wallet", input);
    };
    this.stampExportWallet = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/export_wallet";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.exportWalletAccount = async (input) => {
      return this.request("/public/v1/submit/export_wallet_account", input);
    };
    this.stampExportWalletAccount = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/export_wallet_account";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.importPrivateKey = async (input) => {
      return this.request("/public/v1/submit/import_private_key", input);
    };
    this.stampImportPrivateKey = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/import_private_key";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.importWallet = async (input) => {
      return this.request("/public/v1/submit/import_wallet", input);
    };
    this.stampImportWallet = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/import_wallet";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.initImportPrivateKey = async (input) => {
      return this.request("/public/v1/submit/init_import_private_key", input);
    };
    this.stampInitImportPrivateKey = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/init_import_private_key";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.initImportWallet = async (input) => {
      return this.request("/public/v1/submit/init_import_wallet", input);
    };
    this.stampInitImportWallet = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/init_import_wallet";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.initOtpAuth = async (input) => {
      return this.request("/public/v1/submit/init_otp_auth", input);
    };
    this.stampInitOtpAuth = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/init_otp_auth";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.initUserEmailRecovery = async (input) => {
      return this.request("/public/v1/submit/init_user_email_recovery", input);
    };
    this.stampInitUserEmailRecovery = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/init_user_email_recovery";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.oauth = async (input) => {
      return this.request("/public/v1/submit/oauth", input);
    };
    this.stampOauth = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/oauth";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.otpAuth = async (input) => {
      return this.request("/public/v1/submit/otp_auth", input);
    };
    this.stampOtpAuth = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/otp_auth";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.recoverUser = async (input) => {
      return this.request("/public/v1/submit/recover_user", input);
    };
    this.stampRecoverUser = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/recover_user";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.rejectActivity = async (input) => {
      return this.request("/public/v1/submit/reject_activity", input);
    };
    this.stampRejectActivity = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/reject_activity";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.removeOrganizationFeature = async (input) => {
      return this.request("/public/v1/submit/remove_organization_feature", input);
    };
    this.stampRemoveOrganizationFeature = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/remove_organization_feature";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.setOrganizationFeature = async (input) => {
      return this.request("/public/v1/submit/set_organization_feature", input);
    };
    this.stampSetOrganizationFeature = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/set_organization_feature";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.signRawPayload = async (input) => {
      return this.request("/public/v1/submit/sign_raw_payload", input);
    };
    this.stampSignRawPayload = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_raw_payload";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.signRawPayloads = async (input) => {
      return this.request("/public/v1/submit/sign_raw_payloads", input);
    };
    this.stampSignRawPayloads = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_raw_payloads";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.signTransaction = async (input) => {
      return this.request("/public/v1/submit/sign_transaction", input);
    };
    this.stampSignTransaction = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_transaction";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.updatePolicy = async (input) => {
      return this.request("/public/v1/submit/update_policy", input);
    };
    this.stampUpdatePolicy = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/update_policy";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.updatePrivateKeyTag = async (input) => {
      return this.request("/public/v1/submit/update_private_key_tag", input);
    };
    this.stampUpdatePrivateKeyTag = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/update_private_key_tag";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.updateRootQuorum = async (input) => {
      return this.request("/public/v1/submit/update_root_quorum", input);
    };
    this.stampUpdateRootQuorum = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/update_root_quorum";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.updateUser = async (input) => {
      return this.request("/public/v1/submit/update_user", input);
    };
    this.stampUpdateUser = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/update_user";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    this.updateUserTag = async (input) => {
      return this.request("/public/v1/submit/update_user_tag", input);
    };
    this.stampUpdateUserTag = async (input) => {
      const fullUrl = this.config.baseUrl + "/public/v1/submit/update_user_tag";
      const body = JSON.stringify(input);
      const stamp = await this.stamper.stamp(body);
      return {
        body,
        stamp,
        url: fullUrl
      };
    };
    if (!config.baseUrl) {
      throw new Error(`Missing base URL. Please verify env vars.`);
    }
    this.config = config;
    this.stamper = stamper;
  }
  async request(url, body) {
    const fullUrl = this.config.baseUrl + url;
    const stringifiedBody = JSON.stringify(body);
    const stamp = await this.stamper.stamp(stringifiedBody);
    const response = await fetch2(fullUrl, {
      method: "POST",
      headers: {
        [stamp.stampHeaderName]: stamp.stampHeaderValue,
        "X-Client-Version": VERSION
      },
      body: stringifiedBody,
      redirect: "follow"
    });
    if (!response.ok) {
      let res;
      try {
        res = await response.json();
      } catch (_) {
        throw new Error(`${response.status} ${response.statusText}`);
      }
      throw new TurnkeyRequestError(res);
    }
    const data = await response.json();
    return data;
  }
};

// node_modules/@turnkey/http/dist/shared.mjs
var TurnkeyActivityError = class extends Error {
  constructor(input) {
    const { message, cause, activityId, activityStatus, activityType } = input;
    super(message);
    this.name = "TurnkeyActivityError";
    this.activityId = activityId ?? void 0;
    this.activityStatus = activityStatus ?? void 0;
    this.activityType = activityType ?? void 0;
    this.cause = cause ?? void 0;
  }
};
var TurnkeyActivityConsensusNeededError = class extends Error {
  constructor(input) {
    const { message, cause, activityId, activityStatus, activityType } = input;
    super(message);
    this.name = "TurnkeyActivityConsensusNeededError";
    this.activityId = activityId ?? void 0;
    this.activityStatus = activityStatus ?? void 0;
    this.activityType = activityType ?? void 0;
    this.cause = cause ?? void 0;
  }
};
function assertActivityCompleted(activity) {
  const { id: activityId, status: activityStatus } = activity;
  if (activityStatus === "ACTIVITY_STATUS_CONSENSUS_NEEDED") {
    throw new TurnkeyActivityConsensusNeededError({
      message: "Activity requires consensus",
      activityId,
      activityStatus
    });
  }
  if (activityStatus !== "ACTIVITY_STATUS_COMPLETED") {
    throw new TurnkeyActivityError({
      message: `Expected COMPLETED status, got ${activityStatus}`,
      activityId,
      activityStatus
    });
  }
  return true;
}
function assertNonNull(input) {
  if (input == null) {
    throw new Error(`Got unexpected ${JSON.stringify(input)}`);
  }
  return input;
}

// node_modules/@dynamic-labs/embedded-wallet/src/lib/utils/base64UrlEncode/base64UrlEncode.js
var base64UrlEncode = (challenge) => Buffer.from(challenge).toString("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");

// node_modules/@dynamic-labs/embedded-wallet/src/lib/utils/generateRandomBuffer/generateRandomBuffer.js
var generateRandomBuffer = () => {
  const arr = new Uint8Array(32);
  crypto.getRandomValues(arr);
  return arr.buffer;
};

// node_modules/@dynamic-labs/embedded-wallet/src/lib/utils/convertAttestationTransports/convertAttestationTransports.js
var transportMap = {
  AUTHENTICATOR_TRANSPORT_BLE: AuthenticatorTransportProtocol.Ble,
  AUTHENTICATOR_TRANSPORT_HYBRID: AuthenticatorTransportProtocol.Hybrid,
  AUTHENTICATOR_TRANSPORT_INTERNAL: AuthenticatorTransportProtocol.Internal,
  AUTHENTICATOR_TRANSPORT_NFC: AuthenticatorTransportProtocol.Nfc,
  AUTHENTICATOR_TRANSPORT_USB: AuthenticatorTransportProtocol.Usb
};
var convertAttestationTransports = (attestationTransports) => attestationTransports.map((transport) => transportMap[transport]);

// node_modules/@dynamic-labs/embedded-wallet/src/lib/constants.js
var TURNKEY_API_BASE_URL = "https://api.turnkey.com";
var TURNKEY_API_KEY_EXPIRY_MESSAGE = "Turnkey error 16: expired api key";
var TURNKEY_API_KEY_NOT_FOUND_MESSAGE = "Turnkey error 16: could not find public key";
var WEBAUTHN_NOT_SUPPORTED_OR_CANCELLED_ERROR_MESSAGE = "The operation either timed out or was not allowed";
var WEBAUTHN_NOT_SUPPORTED_OR_DISABLED_ERROR_MESSAGE = "The request is not allowed by the user agent or the platform in the current context, possibly because the user denied permission.";
var INVALID_PASSKEY_SELECTED_ERROR_MESSAGE = "Turnkey error 5: webauthn authenticator not found in organization or parent organization";
var USER_CANCELLED_REQUEST_ERROR_MESSAGE = "The user cancelled the request";
var TURNKEY_SDK_SESSION_KEY_RETRYABLE_ERRORS = [
  TURNKEY_API_KEY_EXPIRY_MESSAGE,
  TURNKEY_API_KEY_NOT_FOUND_MESSAGE
];
var TURNKEY_SDK_BENIGN_ERRORS = [
  WEBAUTHN_NOT_SUPPORTED_OR_CANCELLED_ERROR_MESSAGE,
  WEBAUTHN_NOT_SUPPORTED_OR_DISABLED_ERROR_MESSAGE,
  INVALID_PASSKEY_SELECTED_ERROR_MESSAGE,
  USER_CANCELLED_REQUEST_ERROR_MESSAGE
];

// node_modules/@dynamic-labs/embedded-wallet/src/lib/utils/logger/logger.js
var DynamicEmbeddedWalletsLogger = class extends Logger {
  constructor(name, level) {
    super(name, level);
  }
  error(message, ...args) {
    const [err] = args;
    if (!(err === null || err === void 0 ? void 0 : err.message) || !TURNKEY_SDK_BENIGN_ERRORS.some((errorMsg) => err.message.includes(errorMsg))) {
      this.log(LogLevel.ERROR, message, ...args);
    } else {
      this.warn(message, ...args);
    }
  }
};
var logger = new DynamicEmbeddedWalletsLogger("Dynamic embedded wallets", LogLevel.INFO);

// node_modules/@turnkey/iframe-stamper/dist/index.mjs
var stampHeaderName2 = "X-Stamp";
var IframeEventType;
(function(IframeEventType2) {
  IframeEventType2["PublicKeyReady"] = "PUBLIC_KEY_READY";
  IframeEventType2["InjectCredentialBundle"] = "INJECT_CREDENTIAL_BUNDLE";
  IframeEventType2["InjectKeyExportBundle"] = "INJECT_KEY_EXPORT_BUNDLE";
  IframeEventType2["InjectWalletExportBundle"] = "INJECT_WALLET_EXPORT_BUNDLE";
  IframeEventType2["InjectImportBundle"] = "INJECT_IMPORT_BUNDLE";
  IframeEventType2["ExtractWalletEncryptedBundle"] = "EXTRACT_WALLET_ENCRYPTED_BUNDLE";
  IframeEventType2["ExtractKeyEncryptedBundle"] = "EXTRACT_KEY_ENCRYPTED_BUNDLE";
  IframeEventType2["ApplySettings"] = "APPLY_SETTINGS";
  IframeEventType2["BundleInjected"] = "BUNDLE_INJECTED";
  IframeEventType2["EncryptedBundleExtracted"] = "ENCRYPTED_BUNDLE_EXTRACTED";
  IframeEventType2["SettingsApplied"] = "SETTINGS_APPLIED";
  IframeEventType2["StampRequest"] = "STAMP_REQUEST";
  IframeEventType2["Stamp"] = "STAMP";
  IframeEventType2["Error"] = "ERROR";
})(IframeEventType || (IframeEventType = {}));
var KeyFormat;
(function(KeyFormat2) {
  KeyFormat2["Hexadecimal"] = "HEXADECIMAL";
  KeyFormat2["Solana"] = "SOLANA";
})(KeyFormat || (KeyFormat = {}));
var IframeStamper = class {
  /**
   * Creates a new iframe stamper. This function _does not_ insert the iframe in the DOM.
   * Call `.init()` to insert the iframe element in the DOM.
   */
  constructor(config) {
    if (typeof window === "undefined") {
      throw new Error("Cannot initialize iframe in non-browser environment");
    }
    if (!config.iframeContainer) {
      throw new Error("Iframe container cannot be found");
    }
    this.container = config.iframeContainer;
    if (this.container.querySelector(`#${config.iframeElementId}`)) {
      throw new Error(`Iframe element with ID ${config.iframeElementId} already exists`);
    }
    let iframe = window.document.createElement("iframe");
    iframe.setAttribute("sandbox", "allow-scripts allow-same-origin");
    iframe.id = config.iframeElementId;
    iframe.src = config.iframeUrl;
    this.iframe = iframe;
    const iframeUrl = new URL(config.iframeUrl);
    this.iframeOrigin = iframeUrl.origin;
    this.iframePublicKey = null;
  }
  /**
   * Inserts the iframe on the page and returns a promise resolving to the iframe's public key
   */
  async init() {
    this.container.appendChild(this.iframe);
    return new Promise((resolve, _reject) => {
      window.addEventListener("message", (event) => {
        var _a2;
        if (event.origin !== this.iframeOrigin) {
          return;
        }
        if (((_a2 = event.data) == null ? void 0 : _a2.type) === IframeEventType.PublicKeyReady) {
          this.iframePublicKey = event.data["value"];
          resolve(event.data["value"]);
        }
      }, false);
    });
  }
  /**
   * Removes the iframe from the DOM
   */
  clear() {
    this.iframe.remove();
  }
  /**
   * Returns the public key, or `null` if the underlying iframe isn't properly initialized.
   */
  publicKey() {
    return this.iframePublicKey;
  }
  /**
   * Function to inject a new credential into the iframe
   * The bundle should be encrypted to the iframe's initial public key
   * Encryption should be performed with HPKE (RFC 9180).
   * This is used during recovery and auth flows.
   */
  async injectCredentialBundle(bundle) {
    return new Promise((resolve, reject) => {
      var _a2;
      (_a2 = this.iframe.contentWindow) == null ? void 0 : _a2.postMessage({
        type: IframeEventType.InjectCredentialBundle,
        value: bundle
      }, "*");
      window.addEventListener("message", (event) => {
        var _a3, _b;
        if (event.origin !== this.iframeOrigin) {
          return;
        }
        if (((_a3 = event.data) == null ? void 0 : _a3.type) === IframeEventType.BundleInjected) {
          resolve(event.data["value"]);
        }
        if (((_b = event.data) == null ? void 0 : _b.type) === IframeEventType.Error) {
          reject(event.data["value"]);
        }
      }, false);
    });
  }
  /**
   * Function to inject an export bundle into the iframe
   * The bundle should be encrypted to the iframe's initial public key
   * Encryption should be performed with HPKE (RFC 9180).
   * The key format to encode the private key in after it's exported and decrypted: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.
   * This is used during the private key export flow.
   */
  async injectKeyExportBundle(bundle, organizationId, keyFormat) {
    var _a2;
    (_a2 = this.iframe.contentWindow) == null ? void 0 : _a2.postMessage({
      type: IframeEventType.InjectKeyExportBundle,
      value: bundle,
      keyFormat,
      organizationId
    }, "*");
    return new Promise((resolve, reject) => {
      window.addEventListener("message", (event) => {
        var _a3, _b;
        if (event.origin !== this.iframeOrigin) {
          return;
        }
        if (((_a3 = event.data) == null ? void 0 : _a3.type) === IframeEventType.BundleInjected) {
          resolve(event.data["value"]);
        }
        if (((_b = event.data) == null ? void 0 : _b.type) === IframeEventType.Error) {
          reject(event.data["value"]);
        }
      }, false);
    });
  }
  /**
   * Function to inject an export bundle into the iframe
   * The bundle should be encrypted to the iframe's initial public key
   * Encryption should be performed with HPKE (RFC 9180).
   * This is used during the wallet export flow.
   */
  async injectWalletExportBundle(bundle, organizationId) {
    var _a2;
    (_a2 = this.iframe.contentWindow) == null ? void 0 : _a2.postMessage({
      type: IframeEventType.InjectWalletExportBundle,
      value: bundle,
      organizationId
    }, "*");
    return new Promise((resolve, reject) => {
      window.addEventListener("message", (event) => {
        var _a3, _b;
        if (event.origin !== this.iframeOrigin) {
          return;
        }
        if (((_a3 = event.data) == null ? void 0 : _a3.type) === IframeEventType.BundleInjected) {
          resolve(event.data["value"]);
        }
        if (((_b = event.data) == null ? void 0 : _b.type) === IframeEventType.Error) {
          reject(event.data["value"]);
        }
      }, false);
    });
  }
  /**
   * Function to inject an import bundle into the iframe
   * This is used to initiate either the wallet import flow or the private key import flow.
   */
  async injectImportBundle(bundle, organizationId, userId) {
    var _a2;
    (_a2 = this.iframe.contentWindow) == null ? void 0 : _a2.postMessage({
      type: IframeEventType.InjectImportBundle,
      value: bundle,
      organizationId,
      userId
    }, "*");
    return new Promise((resolve, reject) => {
      window.addEventListener("message", (event) => {
        var _a3, _b;
        if (event.origin !== this.iframeOrigin) {
          return;
        }
        if (((_a3 = event.data) == null ? void 0 : _a3.type) === IframeEventType.BundleInjected) {
          resolve(event.data["value"]);
        }
        if (((_b = event.data) == null ? void 0 : _b.type) === IframeEventType.Error) {
          reject(event.data["value"]);
        }
      }, false);
    });
  }
  /**
   * Function to extract an encrypted bundle from the iframe
   * The bundle should be encrypted to Turnkey's Signer enclave's initial public key
   * Encryption should be performed with HPKE (RFC 9180).
   * This is used during the wallet import flow.
   */
  async extractWalletEncryptedBundle() {
    var _a2;
    (_a2 = this.iframe.contentWindow) == null ? void 0 : _a2.postMessage({
      type: IframeEventType.ExtractWalletEncryptedBundle
    }, "*");
    return new Promise((resolve, reject) => {
      window.addEventListener("message", (event) => {
        var _a3, _b;
        if (event.origin !== this.iframeOrigin) {
          return;
        }
        if (((_a3 = event.data) == null ? void 0 : _a3.type) === IframeEventType.EncryptedBundleExtracted) {
          resolve(event.data["value"]);
        }
        if (((_b = event.data) == null ? void 0 : _b.type) === IframeEventType.Error) {
          reject(event.data["value"]);
        }
      }, false);
    });
  }
  /**
   * Function to extract an encrypted bundle from the iframe
   * The bundle should be encrypted to Turnkey's Signer enclave's initial public key
   * Encryption should be performed with HPKE (RFC 9180).
   * The key format to encode the private key in before it's encrypted and imported: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.
   * This is used during the private key import flow.
   */
  async extractKeyEncryptedBundle(keyFormat) {
    var _a2;
    (_a2 = this.iframe.contentWindow) == null ? void 0 : _a2.postMessage({
      type: IframeEventType.ExtractKeyEncryptedBundle,
      keyFormat
    }, "*");
    return new Promise((resolve, reject) => {
      window.addEventListener("message", (event) => {
        var _a3, _b;
        if (event.origin !== this.iframeOrigin) {
          return;
        }
        if (((_a3 = event.data) == null ? void 0 : _a3.type) === IframeEventType.EncryptedBundleExtracted) {
          resolve(event.data["value"]);
        }
        if (((_b = event.data) == null ? void 0 : _b.type) === IframeEventType.Error) {
          reject(event.data["value"]);
        }
      }, false);
    });
  }
  /**
   * Function to apply settings on allowed parameters in the iframe
   * This is used to style the HTML element used for plaintext in wallet and private key import.
   */
  async applySettings(settings) {
    var _a2;
    const settingsStr = JSON.stringify(settings);
    (_a2 = this.iframe.contentWindow) == null ? void 0 : _a2.postMessage({
      type: IframeEventType.ApplySettings,
      value: settingsStr
    }, "*");
    return new Promise((resolve, reject) => {
      window.addEventListener("message", (event) => {
        var _a3, _b;
        if (event.origin !== this.iframeOrigin) {
          return;
        }
        if (((_a3 = event.data) == null ? void 0 : _a3.type) === IframeEventType.SettingsApplied) {
          resolve(event.data["value"]);
        }
        if (((_b = event.data) == null ? void 0 : _b.type) === IframeEventType.Error) {
          reject(event.data["value"]);
        }
      }, false);
    });
  }
  /**
   * Function to sign a payload with the underlying iframe
   */
  async stamp(payload) {
    var _a2;
    if (this.iframePublicKey === null) {
      throw new Error("null iframe public key. Have you called/awaited .init()?");
    }
    const iframeOrigin = this.iframeOrigin;
    (_a2 = this.iframe.contentWindow) == null ? void 0 : _a2.postMessage({
      type: IframeEventType.StampRequest,
      value: payload
    }, "*");
    return new Promise(function(resolve, reject) {
      window.addEventListener("message", (event) => {
        var _a3, _b;
        if (event.origin !== iframeOrigin) {
          return;
        }
        if (((_a3 = event.data) == null ? void 0 : _a3.type) === IframeEventType.Stamp) {
          resolve({
            stampHeaderName: stampHeaderName2,
            stampHeaderValue: event.data["value"]
          });
        }
        if (((_b = event.data) == null ? void 0 : _b.type) === IframeEventType.Error) {
          reject(event.data["value"]);
        }
      }, false);
    });
  }
};

// node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs
function bufferToBase64url2(buffer) {
  const byteView = new Uint8Array(buffer);
  let str = "";
  for (const charCode of byteView) {
    str += String.fromCharCode(charCode);
  }
  const base64String = btoa(str);
  const base64urlString = base64String.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
  return base64urlString;
}

// node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs
var copyValue2 = "copy";
var convertValue2 = "convert";
function convert2(conversionFn, schema, input) {
  if (schema === copyValue2) {
    return input;
  }
  if (schema === convertValue2) {
    return conversionFn(input);
  }
  if (schema instanceof Array) {
    return input.map((v) => convert2(conversionFn, schema[0], v));
  }
  if (schema instanceof Object) {
    const output = {};
    for (const [key, schemaField] of Object.entries(schema)) {
      if (schemaField.derive) {
        const v = schemaField.derive(input);
        if (v !== void 0) {
          input[key] = v;
        }
      }
      if (!(key in input)) {
        if (schemaField.required) {
          throw new Error(`Missing key: ${key}`);
        }
        continue;
      }
      if (input[key] == null) {
        output[key] = null;
        continue;
      }
      output[key] = convert2(conversionFn, schemaField.schema, input[key]);
    }
    return output;
  }
}
function derived2(schema, derive) {
  return {
    required: true,
    schema,
    derive
  };
}
function required2(schema) {
  return {
    required: true,
    schema
  };
}
function optional2(schema) {
  return {
    required: false,
    schema
  };
}

// node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs
var simplifiedClientExtensionResultsSchema2 = {
  appid: optional2(copyValue2),
  appidExclude: optional2(copyValue2),
  credProps: optional2(copyValue2)
};
var publicKeyCredentialWithAssertion2 = {
  type: required2(copyValue2),
  id: required2(copyValue2),
  rawId: required2(convertValue2),
  authenticatorAttachment: optional2(copyValue2),
  response: required2({
    clientDataJSON: required2(convertValue2),
    authenticatorData: required2(convertValue2),
    signature: required2(convertValue2),
    userHandle: required2(convertValue2)
  }),
  clientExtensionResults: derived2(simplifiedClientExtensionResultsSchema2, (pkc) => pkc.getClientExtensionResults())
};

// node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs
function getResponseToJSON2(credential) {
  return convert2(bufferToBase64url2, publicKeyCredentialWithAssertion2, credential);
}

// node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs
async function get2(options) {
  const response = await navigator.credentials.get(options);
  response.toJSON = () => getResponseToJSON2(response);
  return response;
}

// node_modules/@turnkey/webauthn-stamper/dist/index.mjs
var stampHeaderName3 = "X-Stamp-Webauthn";
var defaultTimeout2 = 5 * 60 * 1e3;
var defaultUserVerification = "preferred";
var WebauthnStamper = class {
  constructor(config) {
    this.rpId = config.rpId;
    this.timeout = config.timeout || defaultTimeout2;
    this.userVerification = config.userVerification || defaultUserVerification;
    this.allowCredentials = config.allowCredentials || [];
  }
  async stamp(payload) {
    const challenge = getChallengeFromPayload(payload);
    const signingOptions = {
      publicKey: {
        rpId: this.rpId,
        challenge,
        allowCredentials: this.allowCredentials,
        timeout: this.timeout,
        userVerification: this.userVerification
      }
    };
    const clientGetResult = await get2(signingOptions);
    const assertion = clientGetResult.toJSON();
    const stamp = {
      authenticatorData: assertion.response.authenticatorData,
      clientDataJson: assertion.response.clientDataJSON,
      credentialId: assertion.id,
      signature: assertion.response.signature
    };
    return {
      stampHeaderName: stampHeaderName3,
      stampHeaderValue: JSON.stringify(stamp)
    };
  }
};
function getChallengeFromPayload(payload) {
  const hexString = createHash().update(payload).digest("hex");
  return new TextEncoder().encode(hexString);
}

// node_modules/@dynamic-labs/webauthn/package.js
var version2 = "4.20.9";

// node_modules/@dynamic-labs/webauthn/src/lib/errors/WebauthnNotSupportedError.js
var WebauthnNotSupportedError = class extends Error {
  constructor() {
    super("Webauthn is not supported on this device");
  }
};

// node_modules/@dynamic-labs/webauthn/_virtual/_tslib.js
function __awaiter2(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

// node_modules/@simplewebauthn/browser/esm/helpers/bufferToBase64URLString.js
function bufferToBase64URLString(buffer) {
  const bytes = new Uint8Array(buffer);
  let str = "";
  for (const charCode of bytes) {
    str += String.fromCharCode(charCode);
  }
  const base64String = btoa(str);
  return base64String.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}

// node_modules/@simplewebauthn/browser/esm/helpers/base64URLStringToBuffer.js
function base64URLStringToBuffer(base64URLString) {
  const base64 = base64URLString.replace(/-/g, "+").replace(/_/g, "/");
  const padLength = (4 - base64.length % 4) % 4;
  const padded = base64.padEnd(base64.length + padLength, "=");
  const binary = atob(padded);
  const buffer = new ArrayBuffer(binary.length);
  const bytes = new Uint8Array(buffer);
  for (let i = 0; i < binary.length; i++) {
    bytes[i] = binary.charCodeAt(i);
  }
  return buffer;
}

// node_modules/@simplewebauthn/browser/esm/helpers/browserSupportsWebAuthn.js
function browserSupportsWebAuthn() {
  return _browserSupportsWebAuthnInternals.stubThis((globalThis == null ? void 0 : globalThis.PublicKeyCredential) !== void 0 && typeof globalThis.PublicKeyCredential === "function");
}
var _browserSupportsWebAuthnInternals = {
  stubThis: (value) => value
};

// node_modules/@simplewebauthn/browser/esm/helpers/toPublicKeyCredentialDescriptor.js
function toPublicKeyCredentialDescriptor(descriptor) {
  const { id } = descriptor;
  return {
    ...descriptor,
    id: base64URLStringToBuffer(id),
    /**
     * `descriptor.transports` is an array of our `AuthenticatorTransportFuture` that includes newer
     * transports that TypeScript's DOM lib is ignorant of. Convince TS that our list of transports
     * are fine to pass to WebAuthn since browsers will recognize the new value.
     */
    transports: descriptor.transports
  };
}

// node_modules/@simplewebauthn/browser/esm/helpers/isValidDomain.js
function isValidDomain(hostname) {
  return (
    // Consider localhost valid as well since it's okay wrt Secure Contexts
    hostname === "localhost" || /^([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}$/i.test(hostname)
  );
}

// node_modules/@simplewebauthn/browser/esm/helpers/webAuthnError.js
var WebAuthnError = class extends Error {
  constructor({ message, code, cause, name }) {
    super(message, { cause });
    Object.defineProperty(this, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.name = name ?? cause.name;
    this.code = code;
  }
};

// node_modules/@simplewebauthn/browser/esm/helpers/identifyRegistrationError.js
function identifyRegistrationError({ error, options }) {
  var _a2, _b, _c;
  const { publicKey } = options;
  if (!publicKey) {
    throw Error("options was missing required publicKey property");
  }
  if (error.name === "AbortError") {
    if (options.signal instanceof AbortSignal) {
      return new WebAuthnError({
        message: "Registration ceremony was sent an abort signal",
        code: "ERROR_CEREMONY_ABORTED",
        cause: error
      });
    }
  } else if (error.name === "ConstraintError") {
    if (((_a2 = publicKey.authenticatorSelection) == null ? void 0 : _a2.requireResidentKey) === true) {
      return new WebAuthnError({
        message: "Discoverable credentials were required but no available authenticator supported it",
        code: "ERROR_AUTHENTICATOR_MISSING_DISCOVERABLE_CREDENTIAL_SUPPORT",
        cause: error
      });
    } else if (
      // @ts-ignore: `mediation` doesn't yet exist on CredentialCreationOptions but it's possible as of Sept 2024
      options.mediation === "conditional" && ((_b = publicKey.authenticatorSelection) == null ? void 0 : _b.userVerification) === "required"
    ) {
      return new WebAuthnError({
        message: "User verification was required during automatic registration but it could not be performed",
        code: "ERROR_AUTO_REGISTER_USER_VERIFICATION_FAILURE",
        cause: error
      });
    } else if (((_c = publicKey.authenticatorSelection) == null ? void 0 : _c.userVerification) === "required") {
      return new WebAuthnError({
        message: "User verification was required but no available authenticator supported it",
        code: "ERROR_AUTHENTICATOR_MISSING_USER_VERIFICATION_SUPPORT",
        cause: error
      });
    }
  } else if (error.name === "InvalidStateError") {
    return new WebAuthnError({
      message: "The authenticator was previously registered",
      code: "ERROR_AUTHENTICATOR_PREVIOUSLY_REGISTERED",
      cause: error
    });
  } else if (error.name === "NotAllowedError") {
    return new WebAuthnError({
      message: error.message,
      code: "ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY",
      cause: error
    });
  } else if (error.name === "NotSupportedError") {
    const validPubKeyCredParams = publicKey.pubKeyCredParams.filter((param) => param.type === "public-key");
    if (validPubKeyCredParams.length === 0) {
      return new WebAuthnError({
        message: 'No entry in pubKeyCredParams was of type "public-key"',
        code: "ERROR_MALFORMED_PUBKEYCREDPARAMS",
        cause: error
      });
    }
    return new WebAuthnError({
      message: "No available authenticator supported any of the specified pubKeyCredParams algorithms",
      code: "ERROR_AUTHENTICATOR_NO_SUPPORTED_PUBKEYCREDPARAMS_ALG",
      cause: error
    });
  } else if (error.name === "SecurityError") {
    const effectiveDomain = globalThis.location.hostname;
    if (!isValidDomain(effectiveDomain)) {
      return new WebAuthnError({
        message: `${globalThis.location.hostname} is an invalid domain`,
        code: "ERROR_INVALID_DOMAIN",
        cause: error
      });
    } else if (publicKey.rp.id !== effectiveDomain) {
      return new WebAuthnError({
        message: `The RP ID "${publicKey.rp.id}" is invalid for this domain`,
        code: "ERROR_INVALID_RP_ID",
        cause: error
      });
    }
  } else if (error.name === "TypeError") {
    if (publicKey.user.id.byteLength < 1 || publicKey.user.id.byteLength > 64) {
      return new WebAuthnError({
        message: "User ID was not between 1 and 64 characters",
        code: "ERROR_INVALID_USER_ID_LENGTH",
        cause: error
      });
    }
  } else if (error.name === "UnknownError") {
    return new WebAuthnError({
      message: "The authenticator was unable to process the specified options, or could not create a new credential",
      code: "ERROR_AUTHENTICATOR_GENERAL_ERROR",
      cause: error
    });
  }
  return error;
}

// node_modules/@simplewebauthn/browser/esm/helpers/webAuthnAbortService.js
var BaseWebAuthnAbortService = class {
  constructor() {
    Object.defineProperty(this, "controller", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
  }
  createNewAbortSignal() {
    if (this.controller) {
      const abortError = new Error("Cancelling existing WebAuthn API call for new one");
      abortError.name = "AbortError";
      this.controller.abort(abortError);
    }
    const newController = new AbortController();
    this.controller = newController;
    return newController.signal;
  }
  cancelCeremony() {
    if (this.controller) {
      const abortError = new Error("Manually cancelling existing WebAuthn API call");
      abortError.name = "AbortError";
      this.controller.abort(abortError);
      this.controller = void 0;
    }
  }
};
var WebAuthnAbortService = new BaseWebAuthnAbortService();

// node_modules/@simplewebauthn/browser/esm/helpers/toAuthenticatorAttachment.js
var attachments = ["cross-platform", "platform"];
function toAuthenticatorAttachment(attachment) {
  if (!attachment) {
    return;
  }
  if (attachments.indexOf(attachment) < 0) {
    return;
  }
  return attachment;
}

// node_modules/@simplewebauthn/browser/esm/methods/startRegistration.js
async function startRegistration(options) {
  var _a2;
  if (!options.optionsJSON && options.challenge) {
    console.warn("startRegistration() was not called correctly. It will try to continue with the provided options, but this call should be refactored to use the expected call structure instead. See https://simplewebauthn.dev/docs/packages/browser#typeerror-cannot-read-properties-of-undefined-reading-challenge for more information.");
    options = { optionsJSON: options };
  }
  const { optionsJSON, useAutoRegister = false } = options;
  if (!browserSupportsWebAuthn()) {
    throw new Error("WebAuthn is not supported in this browser");
  }
  const publicKey = {
    ...optionsJSON,
    challenge: base64URLStringToBuffer(optionsJSON.challenge),
    user: {
      ...optionsJSON.user,
      id: base64URLStringToBuffer(optionsJSON.user.id)
    },
    excludeCredentials: (_a2 = optionsJSON.excludeCredentials) == null ? void 0 : _a2.map(toPublicKeyCredentialDescriptor)
  };
  const createOptions = {};
  if (useAutoRegister) {
    createOptions.mediation = "conditional";
  }
  createOptions.publicKey = publicKey;
  createOptions.signal = WebAuthnAbortService.createNewAbortSignal();
  let credential;
  try {
    credential = await navigator.credentials.create(createOptions);
  } catch (err) {
    throw identifyRegistrationError({ error: err, options: createOptions });
  }
  if (!credential) {
    throw new Error("Registration was not completed");
  }
  const { id, rawId, response, type } = credential;
  let transports = void 0;
  if (typeof response.getTransports === "function") {
    transports = response.getTransports();
  }
  let responsePublicKeyAlgorithm = void 0;
  if (typeof response.getPublicKeyAlgorithm === "function") {
    try {
      responsePublicKeyAlgorithm = response.getPublicKeyAlgorithm();
    } catch (error) {
      warnOnBrokenImplementation("getPublicKeyAlgorithm()", error);
    }
  }
  let responsePublicKey = void 0;
  if (typeof response.getPublicKey === "function") {
    try {
      const _publicKey = response.getPublicKey();
      if (_publicKey !== null) {
        responsePublicKey = bufferToBase64URLString(_publicKey);
      }
    } catch (error) {
      warnOnBrokenImplementation("getPublicKey()", error);
    }
  }
  let responseAuthenticatorData;
  if (typeof response.getAuthenticatorData === "function") {
    try {
      responseAuthenticatorData = bufferToBase64URLString(response.getAuthenticatorData());
    } catch (error) {
      warnOnBrokenImplementation("getAuthenticatorData()", error);
    }
  }
  return {
    id,
    rawId: bufferToBase64URLString(rawId),
    response: {
      attestationObject: bufferToBase64URLString(response.attestationObject),
      clientDataJSON: bufferToBase64URLString(response.clientDataJSON),
      transports,
      publicKeyAlgorithm: responsePublicKeyAlgorithm,
      publicKey: responsePublicKey,
      authenticatorData: responseAuthenticatorData
    },
    type,
    clientExtensionResults: credential.getClientExtensionResults(),
    authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment)
  };
}
function warnOnBrokenImplementation(methodName, cause) {
  console.warn(`The browser extension that intercepted this WebAuthn API call incorrectly implemented ${methodName}. You should report this error to them.
`, cause);
}

// node_modules/@dynamic-labs/webauthn/src/lib/logger.js
var logger2 = new Logger("Webauthn");

// node_modules/@dynamic-labs/webauthn/src/lib/createWebauthnCredential.js
var createWebauthnCredential = (options) => __awaiter2(void 0, void 0, void 0, function* () {
  if (!browserSupportsWebAuthn()) {
    throw new WebauthnNotSupportedError();
  }
  let attestationResp;
  try {
    attestationResp = yield startRegistration({
      optionsJSON: options
    });
  } catch (error) {
    logger2.debug("Failed to create webauthn credential", error);
    throw error;
  }
  return attestationResp;
});

// node_modules/@dynamic-labs/webauthn/src/lib/adapters/convertTransportEnumToTurnkeyEnum.js
var convertTransportEnumToTurnkeyEnum = (transportEnum) => {
  switch (transportEnum) {
    case "internal": {
      return "AUTHENTICATOR_TRANSPORT_INTERNAL";
    }
    case "usb": {
      return "AUTHENTICATOR_TRANSPORT_USB";
    }
    case "nfc": {
      return "AUTHENTICATOR_TRANSPORT_NFC";
    }
    case "ble": {
      return "AUTHENTICATOR_TRANSPORT_BLE";
    }
    case "hybrid": {
      return "AUTHENTICATOR_TRANSPORT_HYBRID";
    }
    default: {
      throw new Error("unsupported transport format " + transportEnum);
    }
  }
};

// node_modules/@dynamic-labs/webauthn/src/lib/adapters/getWebAuthnAttestationTurnkeyAdapter.js
var getWebAuthnAttestationTurnkeyAdapter = (options) => __awaiter2(void 0, void 0, void 0, function* () {
  if (!options.publicKey) {
    throw new Error("Invalid options. Public key attribute must be defined");
  }
  const attestation = yield createWebauthnCredential(convertPublicKeyToWebauthn(options.publicKey));
  return convertAttestationResultToTurnkey(attestation);
});
var convertAttestationResultToTurnkey = (attestation) => {
  var _a2;
  return {
    attestationObject: attestation.response.attestationObject,
    clientDataJson: attestation.response.clientDataJSON,
    credentialId: attestation.rawId,
    transports: ((_a2 = attestation.response.transports) === null || _a2 === void 0 ? void 0 : _a2.map(convertTransportEnumToTurnkeyEnum)) || []
  };
};
var convertPublicKeyToWebauthn = (publicKey) => {
  var _a2;
  return Object.assign(Object.assign({}, publicKey), { challenge: bufferSourceToString(publicKey.challenge), excludeCredentials: (_a2 = publicKey.excludeCredentials) === null || _a2 === void 0 ? void 0 : _a2.map((cred) => Object.assign(Object.assign({}, cred), { id: bufferSourceToString(cred.id) })), user: Object.assign(Object.assign({}, publicKey.user), { id: bufferSourceToString(publicKey.user.id) }) });
};
var bufferSourceToString = (buf) => {
  if (buf instanceof ArrayBuffer) {
    return bufferToBase64URLString(buf);
  } else {
    const arr = new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
    return bufferToBase64URLString(arr);
  }
};

// node_modules/@dynamic-labs/webauthn/src/index.js
assertPackageVersion("@dynamic-labs/webauthn", version2);

// node_modules/@dynamic-labs/embedded-wallet/src/lib/utils/PasskeyService/utils/createTurnkeyPasskeyService/createTurnkeyPasskeyService.js
var createTurnkeyPasskeyService = () => ({
  createWebauthnStamper: (config) => new WebauthnStamper(config),
  getWebAuthnAttestation: getWebAuthnAttestationTurnkeyAdapter
});

// node_modules/@dynamic-labs/embedded-wallet/src/lib/utils/PasskeyService/PasskeyService.js
var _a;
var _PasskeyService_implementation;
var PasskeyService = class {
  /**
   * Gets the current passkey service implementation.
   * If no implementation is set, it will create a new turnkey passkey service.
   * @returns {IPasskeyService} The passkey service implementation.
   */
  static get implementation() {
    if (!__classPrivateFieldGet(_a, _a, "f", _PasskeyService_implementation)) {
      return createTurnkeyPasskeyService();
    }
    return __classPrivateFieldGet(_a, _a, "f", _PasskeyService_implementation);
  }
  /**
   * Sets the passkey service implementation.
   * @param {IPasskeyService} implementation The passkey service implementation to set.
   */
  static set implementation(implementation) {
    __classPrivateFieldSet(_a, _a, implementation, "f", _PasskeyService_implementation);
  }
  /**
   * Gets the WebAuthn attestation method from the current implementation.
   */
  static get getWebAuthnAttestation() {
    return _a.implementation.getWebAuthnAttestation;
  }
  /**
   * Gets the createWebauthnStamper method from the current implementation.
   */
  static get createWebauthnStamper() {
    return _a.implementation.createWebauthnStamper;
  }
};
_a = PasskeyService;
_PasskeyService_implementation = { value: void 0 };

// node_modules/@dynamic-labs/embedded-wallet/src/lib/BaseTurnkeyHandler.js
var BaseTurnkeyHandler = class {
  get client() {
    return this.__turnkeyClient;
  }
  get publicKey() {
    return this.__publicKey;
  }
  clear() {
    var _a2;
    (_a2 = this.__iframeStamper) === null || _a2 === void 0 ? void 0 : _a2.clear();
    this.__iframeStamper = void 0;
    this.__publicKey = void 0;
    this.__turnkeyClient = void 0;
  }
};

// node_modules/@dynamic-labs/embedded-wallet/src/lib/AuthenticatorHandler/TurnkeyAuthenticatorRecoveryHandler.js
var turnkeyPasskeyRecoveryUrl = "https://recovery.turnkey.com";
var turnkeyEmailRecoveryUrl = "https://auth.turnkey.com";
var TURNKEY_RECOVERY_CREDENTIAL_EXPIRATION_SECONDS = 900;
var TURNKEY_SESSION_EXPIRATION_SECONDS = 1800;
var EMAIL_AUTH_CREDENTIAL_TYPE = "CREDENTIAL_TYPE_API_KEY_P256";
var PASSKEY_RECOVERY_CREDENTIAL_TYPE = "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256";
var TurnkeyAuthenticatorRecoveryHandler = class extends BaseTurnkeyHandler {
  constructor() {
    super(...arguments);
    this.isSessionActive = () => {
      if (!this.__createdAt || this.__recoveryType !== "email") {
        return false;
      }
      const isExpired = this.isExpired(this.__createdAt, this.__sessionExpiration || TURNKEY_SESSION_EXPIRATION_SECONDS);
      if (isExpired) {
        this.clear();
        return false;
      }
      return true;
    };
    this.isValidCode = (organizationId) => __awaiter(this, void 0, void 0, function* () {
      var _a2, _b, _c, _d;
      if (!organizationId || !this.__turnkeyRecoveryUserId) {
        throw new DynamicError("Cannot proceed with your request");
      }
      const userResponse = yield (_a2 = this.__turnkeyClient) === null || _a2 === void 0 ? void 0 : _a2.getUser({
        organizationId,
        userId: this.__turnkeyRecoveryUserId
      });
      const credentialTypeMap = {
        email: EMAIL_AUTH_CREDENTIAL_TYPE,
        passkey: PASSKEY_RECOVERY_CREDENTIAL_TYPE
      };
      const recoveryCredential = (_d = (_c = (_b = userResponse === null || userResponse === void 0 ? void 0 : userResponse.user) === null || _b === void 0 ? void 0 : _b.apiKeys) === null || _c === void 0 ? void 0 : _c.filter((k) => k.credential.type === credentialTypeMap[this.__recoveryType])) === null || _d === void 0 ? void 0 : _d.pop();
      if (!recoveryCredential) {
        return false;
      }
      const isExpired = this.isExpired(parseInt(recoveryCredential.createdAt.seconds, 10), TURNKEY_RECOVERY_CREDENTIAL_EXPIRATION_SECONDS);
      if (isExpired) {
        return false;
      }
      this.__createdAt = parseInt(recoveryCredential.createdAt.seconds, 10);
      return true;
    });
    this.isExpired = (createdAtSeconds, expirationTimeSeconds) => {
      const recoveryExpirationSeconds = createdAtSeconds + expirationTimeSeconds;
      const expirationTime = new Date(recoveryExpirationSeconds * 1e3);
      if (/* @__PURE__ */ new Date() >= expirationTime) {
        return true;
      }
      return false;
    };
  }
  get recoveryType() {
    return this.__recoveryType;
  }
  get recoveryUserId() {
    return this.__turnkeyRecoveryUserId || "";
  }
  set recoveryUserId(turnkeyRecoveryUserId) {
    this.__turnkeyRecoveryUserId = turnkeyRecoveryUserId;
  }
  clear() {
    super.clear();
    this.__recoveryType = void 0;
    this.__turnkeyRecoveryUserId = void 0;
    this.__createdAt = void 0;
  }
  initRecovery(authType, iframeContainer, iframeElementId, sessionExpiration) {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.__recoveryType) {
        this.clear();
      }
      this.__sessionExpiration = sessionExpiration;
      this.__recoveryType = authType;
      const iframeUrl = authType === "passkey" ? turnkeyPasskeyRecoveryUrl : turnkeyEmailRecoveryUrl;
      this.__iframeStamper = new IframeStamper({
        iframeContainer,
        iframeElementId,
        iframeUrl
      });
      yield this.__iframeStamper.init();
      this.__publicKey = this.__iframeStamper.publicKey();
      return this.__publicKey;
    });
  }
  verifyRecoveryCode(recoveryBundle, organizationId) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.__iframeStamper) {
        throw new DynamicError("Cannot proceed with your request");
      }
      try {
        yield this.__iframeStamper.injectCredentialBundle(recoveryBundle);
        this.__turnkeyClient = new TurnkeyClient({
          baseUrl: TURNKEY_API_BASE_URL
        }, this.__iframeStamper);
        if (!organizationId || !this.__turnkeyRecoveryUserId) {
          throw new DynamicError("Cannot proceed with your request");
        }
        if (!(yield this.isValidCode(organizationId))) {
          throw new DynamicError("The code is invalid or expired.");
        }
      } catch (err) {
        logger.error("Error while verifying recovery code", err);
        if (err instanceof DynamicError) {
          throw err;
        }
        throw new DynamicError("The code is invalid or expired.");
      }
    });
  }
  completeRecovery(_a2) {
    return __awaiter(this, arguments, void 0, function* ({ attestation, challenge, turnkeySubOrganizationId }) {
      if (!this.__turnkeyClient || !this.__turnkeyRecoveryUserId) {
        throw new DynamicError("Cannot proceed with your request");
      }
      try {
        return this.__turnkeyClient.recoverUser({
          organizationId: turnkeySubOrganizationId,
          parameters: {
            authenticator: {
              attestation,
              authenticatorName: "Passkey",
              challenge
            },
            userId: this.__turnkeyRecoveryUserId
          },
          timestampMs: String(Date.now()),
          type: "ACTIVITY_TYPE_RECOVER_USER"
        });
      } catch (err) {
        logger.error("[TK] Error while completing recovery process", err);
        throw err;
      }
    });
  }
  addPasskeyAuthenticator(_a2) {
    return __awaiter(this, arguments, void 0, function* ({ attestation, challenge, turnkeySubOrganizationId }) {
      if (!this.__turnkeyClient || !this.__turnkeyRecoveryUserId) {
        throw new DynamicError("Cannot proceed with your request");
      }
      try {
        return this.__turnkeyClient.createAuthenticators({
          organizationId: turnkeySubOrganizationId,
          parameters: {
            authenticators: [
              {
                attestation,
                authenticatorName: "Passkey",
                challenge
              }
            ],
            userId: this.__turnkeyRecoveryUserId
          },
          timestampMs: String(Date.now()),
          type: "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2"
        });
      } catch (err) {
        logger.error("[TK] Error while creating new authenticator", err);
        throw err;
      }
    });
  }
  addEmailRecovery(_a2) {
    return __awaiter(this, arguments, void 0, function* ({ organizationId, email, turnkeyUserId }) {
      let rpId = getTLD();
      if (!rpId) {
        rpId = PlatformService.getHostname();
      }
      const stamper = PasskeyService.createWebauthnStamper({
        rpId
      });
      const client = new TurnkeyClient({
        baseUrl: TURNKEY_API_BASE_URL
      }, stamper);
      try {
        const signedRequest2 = yield client.stampUpdateUser({
          organizationId,
          parameters: {
            userEmail: email,
            userId: turnkeyUserId,
            userTagIds: []
          },
          timestampMs: String(Date.now()),
          type: "ACTIVITY_TYPE_UPDATE_USER"
        });
        return { signedRequest: signedRequest2, userId: turnkeyUserId };
      } catch (err) {
        logger.error("Error while adding email recovery", err);
        throw err;
      }
    });
  }
};
var turnkeyAuthenticatorRecoveryHandler = new TurnkeyAuthenticatorRecoveryHandler();

// node_modules/@dynamic-labs/embedded-wallet/src/lib/ExportHandler/TurnkeyExportHandler.js
var turnkeyExportUrl = "https://export.turnkey.com";
var TurnkeyExportHandler = class _TurnkeyExportHandler extends BaseTurnkeyHandler {
  initExport(iframeContainer, iframeElementId) {
    return __awaiter(this, void 0, void 0, function* () {
      this.__iframeStamper = new IframeStamper({
        iframeContainer,
        iframeElementId,
        iframeUrl: turnkeyExportUrl
      });
      yield this.__iframeStamper.init();
      this.__publicKey = this.__iframeStamper.publicKey();
      if (turnkeyAuthenticatorRecoveryHandler.isSessionActive()) {
        this.__turnkeyClient = turnkeyAuthenticatorRecoveryHandler.client;
      } else {
        let rpId = getTLD();
        if (!rpId) {
          rpId = PlatformService.getHostname();
        }
        const passkeyStamper = PasskeyService.createWebauthnStamper({
          rpId
        });
        const apiKeyStamper = _TurnkeyExportHandler === null || _TurnkeyExportHandler === void 0 ? void 0 : _TurnkeyExportHandler.apiKeyStamper;
        const stamper = apiKeyStamper !== null && apiKeyStamper !== void 0 ? apiKeyStamper : passkeyStamper;
        this.__turnkeyClient = new TurnkeyClient({
          baseUrl: TURNKEY_API_BASE_URL
        }, stamper);
      }
      return this.__publicKey;
    });
  }
  verifyExportWallet(_a2) {
    return __awaiter(this, arguments, void 0, function* ({ exportBundle, organizationId }) {
      if (!this.__iframeStamper) {
        throw new DynamicError("Cannot proceed with your request");
      }
      try {
        return yield this.__iframeStamper.injectWalletExportBundle(exportBundle, organizationId);
      } catch (err) {
        logger.error("Error while verifying export wallet", err);
        throw err;
      }
    });
  }
  verifyExportPrivateKey(_a2) {
    return __awaiter(this, arguments, void 0, function* ({ exportBundle, organizationId, chain }) {
      if (!this.__iframeStamper) {
        throw new DynamicError("Cannot proceed with your request");
      }
      const keyFormat = chain === "solana" || chain === "SOL" ? KeyFormat.Solana : KeyFormat.Hexadecimal;
      try {
        return yield this.__iframeStamper.injectKeyExportBundle(exportBundle, organizationId, keyFormat);
      } catch (err) {
        logger.error("Error while verifying export private key", err);
        throw err;
      }
    });
  }
  exportPrivateKey(_a2) {
    return __awaiter(this, arguments, void 0, function* ({ privateKeyId, organizationId }) {
      const apiKeyStamper = _TurnkeyExportHandler === null || _TurnkeyExportHandler === void 0 ? void 0 : _TurnkeyExportHandler.apiKeyStamper;
      if (apiKeyStamper) {
        this.__turnkeyClient = new TurnkeyClient({
          baseUrl: TURNKEY_API_BASE_URL
        }, apiKeyStamper);
      }
      if (!this.__iframeStamper || !this.__publicKey || !this.__turnkeyClient || !privateKeyId) {
        throw new DynamicError("Cannot proceed with your request");
      }
      try {
        const newActivity = yield this.__turnkeyClient.exportPrivateKey({
          organizationId,
          parameters: { privateKeyId, targetPublicKey: this.__publicKey },
          timestampMs: String(Date.now()),
          type: "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY"
        });
        return newActivity.activity;
      } catch (err) {
        logger.error("[TK] Error while completing export private key process", err);
        throw err;
      }
    });
  }
  exportWallet(_a2) {
    return __awaiter(this, arguments, void 0, function* ({ walletId, organizationId, address }) {
      const apiKeyStamper = _TurnkeyExportHandler === null || _TurnkeyExportHandler === void 0 ? void 0 : _TurnkeyExportHandler.apiKeyStamper;
      if (apiKeyStamper) {
        this.__turnkeyClient = new TurnkeyClient({
          baseUrl: TURNKEY_API_BASE_URL
        }, apiKeyStamper);
      }
      if (!this.__iframeStamper || !this.__publicKey || !this.__turnkeyClient || !walletId) {
        throw new DynamicError("Cannot proceed with your request");
      }
      try {
        if (address) {
          const newActivity2 = yield this.__turnkeyClient.exportWalletAccount({
            organizationId,
            parameters: { address, targetPublicKey: this.__publicKey },
            timestampMs: String(Date.now()),
            type: "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT"
          });
          return newActivity2.activity;
        }
        const newActivity = yield this.__turnkeyClient.exportWallet({
          organizationId,
          parameters: { targetPublicKey: this.__publicKey, walletId },
          timestampMs: String(Date.now()),
          type: "ACTIVITY_TYPE_EXPORT_WALLET"
        });
        return newActivity.activity;
      } catch (err) {
        logger.error("[TK] Error while completing export wallet process", err);
        throw err;
      }
    });
  }
};

// node_modules/@dynamic-labs/embedded-wallet/src/lib/TurnkeyWalletConnectorBase/TurnkeyWalletConnectorBase.js
var TurnkeyWalletConnectorBase = class _TurnkeyWalletConnectorBase extends WalletConnectorBase {
  constructor(nameAndKey, props) {
    super(props);
    this.requiresNonDynamicEmailOtp = false;
    this.isEmbeddedWallet = true;
    this.removeSessionKeys = () => __awaiter(this, void 0, void 0, function* () {
      _TurnkeyWalletConnectorBase.sessionKeys = void 0;
      _TurnkeyWalletConnectorBase.apiKeyStamper = void 0;
      TurnkeyExportHandler.apiKeyStamper = void 0;
    });
    this.stampCreateWalletAccountRequest = (_a2) => __awaiter(this, [_a2], void 0, function* ({ request: request2 }) {
      yield this.createOrRestoreSession();
      const turnkeyClient = yield this.getTurnkeyClient();
      return turnkeyClient.stampCreateWalletAccounts(request2);
    });
    this.stampDeleteSubOrganizationRequest = (_b) => __awaiter(this, [_b], void 0, function* ({ request: request2 }) {
      yield this.createOrRestoreSession();
      const turnkeyClient = yield this.getTurnkeyClient();
      return turnkeyClient.stampDeleteSubOrganization(request2);
    });
    if (!props.appName) {
      throw new Error("appName not set");
    }
    this.name = nameAndKey.name;
    this.overrideKey = nameAndKey.key;
    this.appName = props.appName;
    this.__authenticatorMethodHandler = turnkeyAuthenticatorRecoveryHandler;
    this.__exportHandler = new TurnkeyExportHandler();
  }
  getWebAuthnAttestation() {
    return __awaiter(this, void 0, void 0, function* () {
      const challenge = generateRandomBuffer();
      const authenticatorUserId = generateRandomBuffer();
      const { email, passkeyIdentifier } = this;
      if (!email && !passkeyIdentifier) {
        throw new Error("Email or passkeyIdentifier must be set to register a webauthn credential.");
      }
      const displayName = email || `${this.appName} - ${passkeyIdentifier}`;
      const webAuthnCreateParams = {
        publicKey: {
          authenticatorSelection: {
            authenticatorAttachment: void 0,
            requireResidentKey: false,
            residentKey: "preferred",
            userVerification: "discouraged"
          },
          challenge,
          pubKeyCredParams: [
            {
              alg: -7,
              type: "public-key"
            }
          ],
          rp: {
            id: getTLD(),
            name: this.appName
          },
          user: {
            displayName,
            id: authenticatorUserId,
            name: email || `${this.appName} - ${passkeyIdentifier}`
          }
        }
      };
      let attestation;
      try {
        attestation = yield PasskeyService.getWebAuthnAttestation(webAuthnCreateParams);
      } catch (error) {
        logger.warn(`Unable to register webauthn credential on the current page's TLD ${getTLD()}. Falling back to using hostname. ${PlatformService.getHostname()}`, error);
        webAuthnCreateParams.publicKey.rp.id = PlatformService.getHostname();
        attestation = yield PasskeyService.getWebAuthnAttestation(webAuthnCreateParams);
      }
      return {
        attestation: {
          attestationObject: attestation.attestationObject,
          clientDataJson: attestation.clientDataJson,
          credentialId: attestation.credentialId,
          transports: convertAttestationTransports(attestation.transports)
        },
        challenge: base64UrlEncode(challenge),
        displayName
      };
    });
  }
  getAuthenticatorHandler() {
    return this.__authenticatorMethodHandler;
  }
  getExportHandler() {
    return this.__exportHandler;
  }
  // Public methods
  get email() {
    return this._email;
  }
  setEmail(email) {
    this._email = email;
  }
  get phone() {
    return this._phone;
  }
  setPhone(phone) {
    this._phone = phone;
  }
  get passkeyIdentifier() {
    return this._passkeyIdentifier;
  }
  setPasskeyIdentifier(passkeyIdentifier) {
    this._passkeyIdentifier = passkeyIdentifier;
  }
  clearEmail() {
    this._email = null;
  }
  getAddress() {
    return __awaiter(this, void 0, void 0, function* () {
      var _a2;
      return (_a2 = this.verifiedCredential) === null || _a2 === void 0 ? void 0 : _a2.address;
    });
  }
  getConnectedAccounts() {
    return __awaiter(this, void 0, void 0, function* () {
      const verifiedCredentials = this.verifiedCredentials || [];
      const addresses = verifiedCredentials.map((vc) => vc === null || vc === void 0 ? void 0 : vc.address).filter((a) => typeof a === "string");
      return addresses;
    });
  }
  get turnkeyAddress() {
    var _a2;
    const { address } = (_a2 = this.verifiedCredential) !== null && _a2 !== void 0 ? _a2 : {};
    return address;
  }
  get walletProperties() {
    const { walletProperties } = this.verifiedCredential || {};
    return walletProperties;
  }
  // Private methods
  set verifiedCredentials(verifiedCredentials) {
    this._verifiedCredentials = verifiedCredentials;
  }
  get verifiedCredentials() {
    return this._verifiedCredentials;
  }
  set verifiedCredential(verifiedCredential) {
    this._verifiedCredential = verifiedCredential;
  }
  get verifiedCredential() {
    return this._verifiedCredential;
  }
  setSessionKeyFetcher(func) {
    this.createOrRestoreSessionFetcherFunction = func;
  }
  setSessionKeyRemoveFunction(func) {
    this.removeSessionKeysFunction = func;
  }
  createOrRestoreSession() {
    return __awaiter(this, arguments, void 0, function* ({ ignoreRestore } = {}) {
      var _a2;
      if (!this.isSessionKeyCompatible() || _TurnkeyWalletConnectorBase.isLoadingSession) {
        return;
      }
      if (!this.createOrRestoreSessionFetcherFunction) {
        throw new DynamicError("Cannot register session key to init provider");
      }
      const { sessionKeys } = _TurnkeyWalletConnectorBase;
      if (sessionKeys === null || sessionKeys === void 0 ? void 0 : sessionKeys.publicKey) {
        const isExpired = /* @__PURE__ */ new Date() >= new Date(sessionKeys.expirationDate);
        if (!isExpired)
          return sessionKeys.publicKey;
      }
      try {
        _TurnkeyWalletConnectorBase.isLoadingSession = true;
        this.isLoadingSessionDeferredPromise = new DeferredPromise();
        const sessionKeys2 = yield this.createOrRestoreSessionFetcherFunction({
          ignoreRestore
        });
        _TurnkeyWalletConnectorBase.sessionKeys = sessionKeys2;
        _TurnkeyWalletConnectorBase.apiKeyStamper = new ApiKeyStamper({
          apiPrivateKey: sessionKeys2.privateKey,
          apiPublicKey: sessionKeys2.publicKey
        });
        TurnkeyExportHandler.apiKeyStamper = _TurnkeyWalletConnectorBase.apiKeyStamper;
        logger.metaData.set("sessionApiPublicKey", sessionKeys2.publicKey);
        return sessionKeys2.publicKey;
      } catch (error) {
        logger.error(error);
        throw new DynamicError("Failed to create or restore session");
      } finally {
        _TurnkeyWalletConnectorBase.isLoadingSession = false;
        (_a2 = this.isLoadingSessionDeferredPromise) === null || _a2 === void 0 ? void 0 : _a2.resolve();
      }
    });
  }
  isSessionKeyCompatible() {
    var _a2;
    const walletProperties = (_a2 = this.verifiedCredential) === null || _a2 === void 0 ? void 0 : _a2.walletProperties;
    const isSessionKeyCompatible = walletProperties === null || walletProperties === void 0 ? void 0 : walletProperties.isSessionKeyCompatible;
    return Boolean(isSessionKeyCompatible);
  }
  isSessionActive() {
    return __awaiter(this, void 0, void 0, function* () {
      const hasWallet = yield this.getAddress();
      return Boolean(hasWallet && _TurnkeyWalletConnectorBase.sessionKeys && _TurnkeyWalletConnectorBase.apiKeyStamper);
    });
  }
  get sessionKeys() {
    return _TurnkeyWalletConnectorBase.sessionKeys;
  }
  getTurnkeyClient() {
    return __awaiter(this, void 0, void 0, function* () {
      var _a2, _b;
      if (_TurnkeyWalletConnectorBase.isLoadingSession) {
        yield (_a2 = this.isLoadingSessionDeferredPromise) === null || _a2 === void 0 ? void 0 : _a2.promise;
      }
      let rpId = getTLD();
      if (!rpId) {
        rpId = PlatformService.getHostname();
      }
      const passkeyStamper = PasskeyService.createWebauthnStamper({
        rpId
      });
      const apiKeyStamper = _TurnkeyWalletConnectorBase === null || _TurnkeyWalletConnectorBase === void 0 ? void 0 : _TurnkeyWalletConnectorBase.apiKeyStamper;
      const stamper = apiKeyStamper !== null && apiKeyStamper !== void 0 ? apiKeyStamper : passkeyStamper;
      this.__turnkeyClient = (_b = this.getAuthenticatorHandler().client) !== null && _b !== void 0 ? _b : new TurnkeyClient({
        baseUrl: TURNKEY_API_BASE_URL
      }, stamper);
      return this.__turnkeyClient;
    });
  }
  setLoggerMetadata() {
    var _a2, _b, _c;
    logger.metaData.set("turnkeySubOrganizationId", (_b = (_a2 = this._verifiedCredential) === null || _a2 === void 0 ? void 0 : _a2.walletProperties) === null || _b === void 0 ? void 0 : _b.turnkeySubOrganizationId);
    logger.metaData.set("walletId", (_c = this._verifiedCredential) === null || _c === void 0 ? void 0 : _c.id);
    let authMethod = "Unknown";
    if (this.isSessionKeyCompatible()) {
      authMethod = "SessionKeys";
    } else if (this.__authenticatorMethodHandler.recoveryType === "passkey") {
      authMethod = "Passkey";
    } else if (this.__authenticatorMethodHandler.recoveryType === "email") {
      authMethod = "EmailAuth";
    }
    logger.metaData.set("authMethod", authMethod);
  }
};
TurnkeyWalletConnectorBase.isLoadingSession = false;

// node_modules/@dynamic-labs/embedded-wallet/src/lib/utils/findTurnkeyVerifiedCredentials/findTurnkeyVerifiedCredentials.js
var findTurnkeyVerifiedCredentials = (verifiedCredentials, chain) => verifiedCredentials === null || verifiedCredentials === void 0 ? void 0 : verifiedCredentials.filter(({ walletName, chain: vcChain }) => (walletName === null || walletName === void 0 ? void 0 : walletName.startsWith("turnkey")) && chain === vcChain);
var findTurnkeyVerifiedCredentialsWithSmartWalletRef = (verifiedCredentials, chain) => verifiedCredentials === null || verifiedCredentials === void 0 ? void 0 : verifiedCredentials.reduce((acc, vc) => {
  var _a2;
  if (((_a2 = vc.walletName) === null || _a2 === void 0 ? void 0 : _a2.startsWith("turnkey")) && chain === vc.chain) {
    const smartWallet = verifiedCredentials.find((v) => v.signerRefId === vc.id);
    const smartWalletRefId = smartWallet === null || smartWallet === void 0 ? void 0 : smartWallet.id;
    const smartWalletRefAddress = smartWallet === null || smartWallet === void 0 ? void 0 : smartWallet.address;
    acc.push(Object.assign(Object.assign({}, vc), { smartWalletRefAddress, smartWalletRefId }));
  }
  return acc;
}, []);

// node_modules/@dynamic-labs/embedded-wallet/src/index.js
assertPackageVersion("@dynamic-labs/embedded-wallet", version);

// node_modules/@dynamic-labs/message-transport/package.js
var version3 = "4.20.9";

// node_modules/@dynamic-labs/message-transport/src/messageTransport/messageTransport.js
var createMessageTransport = () => {
  const listeners = /* @__PURE__ */ new Set();
  return {
    emit: (message) => listeners.forEach((callback) => callback(message)),
    off: (callback) => listeners.delete(callback),
    on: (callback) => listeners.add(callback)
  };
};

// node_modules/@dynamic-labs/message-transport/src/messageTransport/decorators/applyDefaultMessageOrigin/applyDefaultMessageOrigin.js
var applyDefaultMessageOrigin = ({ defaultOrigin, messageTransport }) => Object.assign(Object.assign({}, messageTransport), { defaultOrigin, emit: (message) => {
  var _a2;
  messageTransport.emit(Object.assign(Object.assign({}, message), { origin: (_a2 = message.origin) !== null && _a2 !== void 0 ? _a2 : defaultOrigin }));
} });

// node_modules/@dynamic-labs/message-transport/src/messageTransport/decorators/applyRecoveryManager/applyRecoveryManager.js
var hasRecoveryManager = (messageTransport) => "recoveryManager" in messageTransport;

// node_modules/@dynamic-labs/message-transport/_virtual/_tslib.js
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter3(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

// node_modules/@dynamic-labs/message-transport/src/utils/isSerializedError/isSerializedError.js
var isSerializedError = (serializedError) => {
  if (typeof serializedError !== "object" || serializedError === null) {
    return false;
  }
  const { message, stack } = serializedError;
  return typeof message === "string" && typeof stack === "string";
};

// node_modules/@dynamic-labs/message-transport/src/utils/parseErrorFromTransport/parseErrorFromTransport.js
var parseErrorFromTransport = (serializedError) => {
  const { message, name, stack } = serializedError, otherProps = __rest(serializedError, ["message", "name", "stack"]);
  let error;
  if (message) {
    try {
      const data = JSON.parse(message);
      if (Array.isArray(data))
        return data;
    } catch (_a2) {
    }
  }
  switch (name) {
    case "TypeError":
      error = new TypeError(message);
      break;
    case "ReferenceError":
      error = new ReferenceError(message);
      break;
    case "SyntaxError":
      error = new SyntaxError(message);
      break;
    case "RangeError":
      error = new RangeError(message);
      break;
    case "EvalError":
      error = new EvalError(message);
      break;
    case "URIError":
      error = new URIError(message);
      break;
    default:
      error = new Error(message);
      error.name = name || "Error";
  }
  if (stack) {
    error.stack = [message, stack].join("\n");
  }
  Object.assign(error, otherProps);
  return error;
};

// node_modules/@dynamic-labs/message-transport/src/utils/serializeErrorForTransport/serializeErrorForTransport.js
var serializeErrorForTransport = (err) => {
  if (err instanceof Error) {
    return convertError(err);
  } else if (Array.isArray(err)) {
    return { message: JSON.stringify(err) };
  } else if (typeof err === "object" && err !== null) {
    const errorMessage = serializeObjectToMessage(err);
    return convertError(Object.assign({ message: errorMessage, name: "Error", stack: "" }, err));
  }
  return { message: String(err) };
};
var convertError = (err) => Object.assign({
  // @ts-expect-error message is a standard property of Error
  message: err.message,
  // @ts-expect-error name is a standard property of Error
  name: err.name,
  stack: err.stack
}, err);
var serializeObjectToMessage = (obj) => {
  try {
    const data = JSON.stringify(obj);
    return data;
  } catch (_a2) {
    return String(obj);
  }
};

// node_modules/@dynamic-labs/message-transport/src/utils/logger.js
var logger3 = new Logger("message-transport");

// node_modules/@dynamic-labs/message-transport/src/requestChannel/utils/utils.js
var getResolveMessageType = (type) => `${type}__resolve`;
var getRejectMessageType = (type) => `${type}__reject`;
var getAckMessageType = (type) => `${type}__ack`;
var createNoHandlerError = (type) => {
  const message = `No handlers were registered for message of type ${type}`;
  logger3.error(message);
  return new RequestChannelNotHandledError(message);
};
var TIMEOUT_DURATION = 1e3;

// node_modules/@dynamic-labs/message-transport/src/requestChannel/createRequestChannelMessageSender/createRequestChannelMessageSender.js
var createRequestChannelMessageSender = ({ requestType, messageSessionId, timeoutMap, onReceiveAck, messageTransport, onTimeout, params }) => {
  let messageTimedOut = false;
  const ackMessageType = getAckMessageType(requestType);
  const message = {
    args: params,
    messageSessionId,
    type: requestType
  };
  const handleAckMessage = ({ messageSessionId: incomingSessionId, type: incomingType }) => {
    if (incomingSessionId !== messageSessionId || incomingType !== ackMessageType)
      return;
    clearTimeout(timeoutMap[messageSessionId]);
    delete timeoutMap[messageSessionId];
    onReceiveAck === null || onReceiveAck === void 0 ? void 0 : onReceiveAck();
    if (messageTimedOut) {
      logger3.instrument(`Identified a false negative for message time out. Message: ${requestType} with session id ${messageSessionId}. Params: ${JSON.stringify(params)}`);
    }
  };
  const sendMessage = () => {
    const startTimer = () => {
      const timeoutTimer = setTimeout(() => {
        if (hasRecoveryManager(messageTransport) && messageTransport.recoveryManager.canRetryMessageSessionId(messageSessionId)) {
          messageTransport.recoveryManager.triggerRecovery(messageSessionId);
          sendMessage();
        } else {
          onTimeout();
          messageTimedOut = true;
        }
      }, TIMEOUT_DURATION);
      timeoutMap[messageSessionId] = timeoutTimer;
    };
    if ("isBlocked" in messageTransport && messageTransport.isBlocked()) {
      messageTransport.emit(message, { onEmit: startTimer });
      return;
    }
    messageTransport.emit(message);
    startTimer();
  };
  return { handleAckMessage, sendMessage };
};

// node_modules/@dynamic-labs/message-transport/src/requestChannel/requestChannel.js
var createRequestChannel = (messageTransport) => {
  let uniqueIdCounter = 0;
  const idPrefix = Math.random().toString();
  const getUniqueId = () => `${idPrefix}-${uniqueIdCounter++}`;
  const timeoutMap = {};
  return {
    emit: (requestType, ...params) => new Promise((resolve, reject) => {
      const messageSessionId = getUniqueId();
      const { handleAckMessage, sendMessage } = createRequestChannelMessageSender({
        messageSessionId,
        messageTransport,
        onReceiveAck: () => {
          cleanupMessageHandler();
          resolve();
        },
        onTimeout: () => {
          reject(createNoHandlerError(requestType));
          cleanupMessageHandler();
        },
        params,
        requestType,
        timeoutMap
      });
      const cleanupMessageHandler = () => messageTransport.off(handleAckMessage);
      messageTransport.on(handleAckMessage);
      sendMessage();
    }),
    handle: (requestType, handler) => {
      const messageHandler = (_a2) => __awaiter3(void 0, [_a2], void 0, function* ({ args, messageSessionId, type: incomingType }) {
        if (requestType !== incomingType)
          return;
        messageTransport.emit({
          args: [],
          messageSessionId,
          type: getAckMessageType(requestType)
        });
        const result = handler(...args);
        if (!(result instanceof Promise))
          return;
        try {
          const response = yield result;
          messageTransport.emit({
            args: [response],
            messageSessionId,
            type: getResolveMessageType(requestType)
          });
        } catch (error) {
          messageTransport.emit({
            args: [serializeErrorForTransport(error)],
            messageSessionId,
            type: getRejectMessageType(requestType)
          });
        }
      });
      messageTransport.on(messageHandler);
      return () => {
        messageTransport.off(messageHandler);
      };
    },
    request: (requestType, ...params) => new Promise((resolve, reject) => {
      const messageSessionId = getUniqueId();
      const resolveMessageType = getResolveMessageType(requestType);
      const rejectMessageType = getRejectMessageType(requestType);
      const { handleAckMessage, sendMessage } = createRequestChannelMessageSender({
        messageSessionId,
        messageTransport,
        onTimeout: () => {
          reject(createNoHandlerError(requestType));
          cleanupMessageHandler();
        },
        params,
        requestType,
        timeoutMap
      });
      const handleMessage = (message) => {
        if (message.messageSessionId !== messageSessionId)
          return;
        const { args: [result], type: incomingType } = message;
        if (incomingType === resolveMessageType) {
          cleanupMessageHandler();
          resolve(result);
          return;
        }
        if (incomingType === rejectMessageType) {
          cleanupMessageHandler();
          if (isSerializedError(result)) {
            reject(parseErrorFromTransport(result));
          } else {
            reject(result);
          }
          return;
        }
        handleAckMessage(message);
      };
      const cleanupMessageHandler = () => messageTransport.off(handleMessage);
      messageTransport.on(handleMessage);
      sendMessage();
    })
  };
};

// node_modules/@dynamic-labs/message-transport/src/utils/parseMessageTransportData/parseMessageTransportData.js
var parseMessageTransportData = (parsedData) => {
  if (!parsedData || typeof parsedData !== "object") {
    return void 0;
  }
  const message = {
    args: parsedData.args,
    messageSessionId: parsedData.messageSessionId,
    origin: parsedData.origin,
    type: parsedData.type
  };
  if (!Array.isArray(message.args) || typeof message.messageSessionId !== "string" || typeof message.origin !== "string" || typeof message.type !== "string") {
    return void 0;
  }
  return message;
};

// node_modules/@vue/shared/dist/shared.esm-bundler.js
function makeMap(str) {
  const map = /* @__PURE__ */ Object.create(null);
  for (const key of str.split(",")) map[key] = 1;
  return (val) => val in map;
}
var EMPTY_OBJ = true ? Object.freeze({}) : {};
var EMPTY_ARR = true ? Object.freeze([]) : [];
var extend = Object.assign;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var hasOwn = (val, key) => hasOwnProperty.call(val, key);
var isArray = Array.isArray;
var isMap = (val) => toTypeString(val) === "[object Map]";
var isString = (val) => typeof val === "string";
var isSymbol = (val) => typeof val === "symbol";
var isObject = (val) => val !== null && typeof val === "object";
var objectToString = Object.prototype.toString;
var toTypeString = (value) => objectToString.call(value);
var toRawType = (value) => {
  return toTypeString(value).slice(8, -1);
};
var isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
var isReservedProp = makeMap(
  // the leading comma is intentional so empty string "" is also included
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
var isBuiltInDirective = makeMap(
  "bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"
);
var cacheStringFunction = (fn) => {
  const cache = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
};
var camelizeRE = /-(\w)/g;
var camelize = cacheStringFunction(
  (str) => {
    return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
  }
);
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cacheStringFunction(
  (str) => str.replace(hyphenateRE, "-$1").toLowerCase()
);
var capitalize = cacheStringFunction((str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
var toHandlerKey = cacheStringFunction(
  (str) => {
    const s = str ? `on${capitalize(str)}` : ``;
    return s;
  }
);
var hasChanged = (value, oldValue) => !Object.is(value, oldValue);
var GLOBALS_ALLOWED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error,Symbol";
var isGloballyAllowed = makeMap(GLOBALS_ALLOWED);
var HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
var SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
var MATH_TAGS = "annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics";
var VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
var isHTMLTag = makeMap(HTML_TAGS);
var isSVGTag = makeMap(SVG_TAGS);
var isMathMLTag = makeMap(MATH_TAGS);
var isVoidTag = makeMap(VOID_TAGS);
var specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
var isSpecialBooleanAttr = makeMap(specialBooleanAttrs);
var isBooleanAttr = makeMap(
  specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`
);
var isKnownHtmlAttr = makeMap(
  `accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`
);
var isKnownSvgAttr = makeMap(
  `xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`
);
var isKnownMathMLAttr = makeMap(
  `accent,accentunder,actiontype,align,alignmentscope,altimg,altimg-height,altimg-valign,altimg-width,alttext,bevelled,close,columnsalign,columnlines,columnspan,denomalign,depth,dir,display,displaystyle,encoding,equalcolumns,equalrows,fence,fontstyle,fontweight,form,frame,framespacing,groupalign,height,href,id,indentalign,indentalignfirst,indentalignlast,indentshift,indentshiftfirst,indentshiftlast,indextype,justify,largetop,largeop,lquote,lspace,mathbackground,mathcolor,mathsize,mathvariant,maxsize,minlabelspacing,mode,other,overflow,position,rowalign,rowlines,rowspan,rquote,rspace,scriptlevel,scriptminsize,scriptsizemultiplier,selection,separator,separators,shift,side,src,stackalign,stretchy,subscriptshift,superscriptshift,symmetric,voffset,width,widths,xlink:href,xlink:show,xlink:type,xmlns`
);

// node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
function warn(msg, ...args) {
  console.warn(`[Vue warn] ${msg}`, ...args);
}
var activeSub;
var batchDepth = 0;
var batchedSub;
var batchedComputed;
function startBatch() {
  batchDepth++;
}
function endBatch() {
  if (--batchDepth > 0) {
    return;
  }
  if (batchedComputed) {
    let e = batchedComputed;
    batchedComputed = void 0;
    while (e) {
      const next = e.next;
      e.next = void 0;
      e.flags &= -9;
      e = next;
    }
  }
  let error;
  while (batchedSub) {
    let e = batchedSub;
    batchedSub = void 0;
    while (e) {
      const next = e.next;
      e.next = void 0;
      e.flags &= -9;
      if (e.flags & 1) {
        try {
          ;
          e.trigger();
        } catch (err) {
          if (!error) error = err;
        }
      }
      e = next;
    }
  }
  if (error) throw error;
}
var shouldTrack = true;
var trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
var globalVersion = 0;
var Link = class {
  constructor(sub, dep) {
    this.sub = sub;
    this.dep = dep;
    this.version = dep.version;
    this.nextDep = this.prevDep = this.nextSub = this.prevSub = this.prevActiveLink = void 0;
  }
};
var Dep = class {
  // TODO isolatedDeclarations "__v_skip"
  constructor(computed) {
    this.computed = computed;
    this.version = 0;
    this.activeLink = void 0;
    this.subs = void 0;
    this.map = void 0;
    this.key = void 0;
    this.sc = 0;
    this.__v_skip = true;
    if (true) {
      this.subsHead = void 0;
    }
  }
  track(debugInfo) {
    if (!activeSub || !shouldTrack || activeSub === this.computed) {
      return;
    }
    let link = this.activeLink;
    if (link === void 0 || link.sub !== activeSub) {
      link = this.activeLink = new Link(activeSub, this);
      if (!activeSub.deps) {
        activeSub.deps = activeSub.depsTail = link;
      } else {
        link.prevDep = activeSub.depsTail;
        activeSub.depsTail.nextDep = link;
        activeSub.depsTail = link;
      }
      addSub(link);
    } else if (link.version === -1) {
      link.version = this.version;
      if (link.nextDep) {
        const next = link.nextDep;
        next.prevDep = link.prevDep;
        if (link.prevDep) {
          link.prevDep.nextDep = next;
        }
        link.prevDep = activeSub.depsTail;
        link.nextDep = void 0;
        activeSub.depsTail.nextDep = link;
        activeSub.depsTail = link;
        if (activeSub.deps === link) {
          activeSub.deps = next;
        }
      }
    }
    if (activeSub.onTrack) {
      activeSub.onTrack(
        extend(
          {
            effect: activeSub
          },
          debugInfo
        )
      );
    }
    return link;
  }
  trigger(debugInfo) {
    this.version++;
    globalVersion++;
    this.notify(debugInfo);
  }
  notify(debugInfo) {
    startBatch();
    try {
      if (true) {
        for (let head = this.subsHead; head; head = head.nextSub) {
          if (head.sub.onTrigger && !(head.sub.flags & 8)) {
            head.sub.onTrigger(
              extend(
                {
                  effect: head.sub
                },
                debugInfo
              )
            );
          }
        }
      }
      for (let link = this.subs; link; link = link.prevSub) {
        if (link.sub.notify()) {
          ;
          link.sub.dep.notify();
        }
      }
    } finally {
      endBatch();
    }
  }
};
function addSub(link) {
  link.dep.sc++;
  if (link.sub.flags & 4) {
    const computed = link.dep.computed;
    if (computed && !link.dep.subs) {
      computed.flags |= 4 | 16;
      for (let l = computed.deps; l; l = l.nextDep) {
        addSub(l);
      }
    }
    const currentTail = link.dep.subs;
    if (currentTail !== link) {
      link.prevSub = currentTail;
      if (currentTail) currentTail.nextSub = link;
    }
    if (link.dep.subsHead === void 0) {
      link.dep.subsHead = link;
    }
    link.dep.subs = link;
  }
}
var targetMap = /* @__PURE__ */ new WeakMap();
var ITERATE_KEY = Symbol(
  true ? "Object iterate" : ""
);
var MAP_KEY_ITERATE_KEY = Symbol(
  true ? "Map keys iterate" : ""
);
var ARRAY_ITERATE_KEY = Symbol(
  true ? "Array iterate" : ""
);
function track(target, type, key) {
  if (shouldTrack && activeSub) {
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = new Dep());
      dep.map = depsMap;
      dep.key = key;
    }
    if (true) {
      dep.track({
        target,
        type,
        key
      });
    } else {
      dep.track();
    }
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    globalVersion++;
    return;
  }
  const run = (dep) => {
    if (dep) {
      if (true) {
        dep.trigger({
          target,
          type,
          key,
          newValue,
          oldValue,
          oldTarget
        });
      } else {
        dep.trigger();
      }
    }
  };
  startBatch();
  if (type === "clear") {
    depsMap.forEach(run);
  } else {
    const targetIsArray = isArray(target);
    const isArrayIndex = targetIsArray && isIntegerKey(key);
    if (targetIsArray && key === "length") {
      const newLength = Number(newValue);
      depsMap.forEach((dep, key2) => {
        if (key2 === "length" || key2 === ARRAY_ITERATE_KEY || !isSymbol(key2) && key2 >= newLength) {
          run(dep);
        }
      });
    } else {
      if (key !== void 0 || depsMap.has(void 0)) {
        run(depsMap.get(key));
      }
      if (isArrayIndex) {
        run(depsMap.get(ARRAY_ITERATE_KEY));
      }
      switch (type) {
        case "add":
          if (!targetIsArray) {
            run(depsMap.get(ITERATE_KEY));
            if (isMap(target)) {
              run(depsMap.get(MAP_KEY_ITERATE_KEY));
            }
          } else if (isArrayIndex) {
            run(depsMap.get("length"));
          }
          break;
        case "delete":
          if (!targetIsArray) {
            run(depsMap.get(ITERATE_KEY));
            if (isMap(target)) {
              run(depsMap.get(MAP_KEY_ITERATE_KEY));
            }
          }
          break;
        case "set":
          if (isMap(target)) {
            run(depsMap.get(ITERATE_KEY));
          }
          break;
      }
    }
  }
  endBatch();
}
function reactiveReadArray(array) {
  const raw = toRaw(array);
  if (raw === array) return raw;
  track(raw, "iterate", ARRAY_ITERATE_KEY);
  return isShallow(array) ? raw : raw.map(toReactive);
}
function shallowReadArray(arr) {
  track(arr = toRaw(arr), "iterate", ARRAY_ITERATE_KEY);
  return arr;
}
var arrayInstrumentations = {
  __proto__: null,
  [Symbol.iterator]() {
    return iterator(this, Symbol.iterator, toReactive);
  },
  concat(...args) {
    return reactiveReadArray(this).concat(
      ...args.map((x) => isArray(x) ? reactiveReadArray(x) : x)
    );
  },
  entries() {
    return iterator(this, "entries", (value) => {
      value[1] = toReactive(value[1]);
      return value;
    });
  },
  every(fn, thisArg) {
    return apply(this, "every", fn, thisArg, void 0, arguments);
  },
  filter(fn, thisArg) {
    return apply(this, "filter", fn, thisArg, (v) => v.map(toReactive), arguments);
  },
  find(fn, thisArg) {
    return apply(this, "find", fn, thisArg, toReactive, arguments);
  },
  findIndex(fn, thisArg) {
    return apply(this, "findIndex", fn, thisArg, void 0, arguments);
  },
  findLast(fn, thisArg) {
    return apply(this, "findLast", fn, thisArg, toReactive, arguments);
  },
  findLastIndex(fn, thisArg) {
    return apply(this, "findLastIndex", fn, thisArg, void 0, arguments);
  },
  // flat, flatMap could benefit from ARRAY_ITERATE but are not straight-forward to implement
  forEach(fn, thisArg) {
    return apply(this, "forEach", fn, thisArg, void 0, arguments);
  },
  includes(...args) {
    return searchProxy(this, "includes", args);
  },
  indexOf(...args) {
    return searchProxy(this, "indexOf", args);
  },
  join(separator) {
    return reactiveReadArray(this).join(separator);
  },
  // keys() iterator only reads `length`, no optimisation required
  lastIndexOf(...args) {
    return searchProxy(this, "lastIndexOf", args);
  },
  map(fn, thisArg) {
    return apply(this, "map", fn, thisArg, void 0, arguments);
  },
  pop() {
    return noTracking(this, "pop");
  },
  push(...args) {
    return noTracking(this, "push", args);
  },
  reduce(fn, ...args) {
    return reduce(this, "reduce", fn, args);
  },
  reduceRight(fn, ...args) {
    return reduce(this, "reduceRight", fn, args);
  },
  shift() {
    return noTracking(this, "shift");
  },
  // slice could use ARRAY_ITERATE but also seems to beg for range tracking
  some(fn, thisArg) {
    return apply(this, "some", fn, thisArg, void 0, arguments);
  },
  splice(...args) {
    return noTracking(this, "splice", args);
  },
  toReversed() {
    return reactiveReadArray(this).toReversed();
  },
  toSorted(comparer) {
    return reactiveReadArray(this).toSorted(comparer);
  },
  toSpliced(...args) {
    return reactiveReadArray(this).toSpliced(...args);
  },
  unshift(...args) {
    return noTracking(this, "unshift", args);
  },
  values() {
    return iterator(this, "values", toReactive);
  }
};
function iterator(self2, method, wrapValue) {
  const arr = shallowReadArray(self2);
  const iter = arr[method]();
  if (arr !== self2 && !isShallow(self2)) {
    iter._next = iter.next;
    iter.next = () => {
      const result = iter._next();
      if (result.value) {
        result.value = wrapValue(result.value);
      }
      return result;
    };
  }
  return iter;
}
var arrayProto = Array.prototype;
function apply(self2, method, fn, thisArg, wrappedRetFn, args) {
  const arr = shallowReadArray(self2);
  const needsWrap = arr !== self2 && !isShallow(self2);
  const methodFn = arr[method];
  if (methodFn !== arrayProto[method]) {
    const result2 = methodFn.apply(self2, args);
    return needsWrap ? toReactive(result2) : result2;
  }
  let wrappedFn = fn;
  if (arr !== self2) {
    if (needsWrap) {
      wrappedFn = function(item, index) {
        return fn.call(this, toReactive(item), index, self2);
      };
    } else if (fn.length > 2) {
      wrappedFn = function(item, index) {
        return fn.call(this, item, index, self2);
      };
    }
  }
  const result = methodFn.call(arr, wrappedFn, thisArg);
  return needsWrap && wrappedRetFn ? wrappedRetFn(result) : result;
}
function reduce(self2, method, fn, args) {
  const arr = shallowReadArray(self2);
  let wrappedFn = fn;
  if (arr !== self2) {
    if (!isShallow(self2)) {
      wrappedFn = function(acc, item, index) {
        return fn.call(this, acc, toReactive(item), index, self2);
      };
    } else if (fn.length > 3) {
      wrappedFn = function(acc, item, index) {
        return fn.call(this, acc, item, index, self2);
      };
    }
  }
  return arr[method](wrappedFn, ...args);
}
function searchProxy(self2, method, args) {
  const arr = toRaw(self2);
  track(arr, "iterate", ARRAY_ITERATE_KEY);
  const res = arr[method](...args);
  if ((res === -1 || res === false) && isProxy(args[0])) {
    args[0] = toRaw(args[0]);
    return arr[method](...args);
  }
  return res;
}
function noTracking(self2, method, args = []) {
  pauseTracking();
  startBatch();
  const res = toRaw(self2)[method].apply(self2, args);
  endBatch();
  resetTracking();
  return res;
}
var isNonTrackableKeys = makeMap(`__proto__,__v_isRef,__isVue`);
var builtInSymbols = new Set(
  Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol)
);
function hasOwnProperty2(key) {
  if (!isSymbol(key)) key = String(key);
  const obj = toRaw(this);
  track(obj, "has", key);
  return obj.hasOwnProperty(key);
}
var BaseReactiveHandler = class {
  constructor(_isReadonly = false, _isShallow = false) {
    this._isReadonly = _isReadonly;
    this._isShallow = _isShallow;
  }
  get(target, key, receiver) {
    if (key === "__v_skip") return target["__v_skip"];
    const isReadonly2 = this._isReadonly, isShallow2 = this._isShallow;
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return isShallow2;
    } else if (key === "__v_raw") {
      if (receiver === (isReadonly2 ? isShallow2 ? shallowReadonlyMap : readonlyMap : isShallow2 ? shallowReactiveMap : reactiveMap).get(target) || // receiver is not the reactive proxy, but has the same prototype
      // this means the receiver is a user proxy of the reactive proxy
      Object.getPrototypeOf(target) === Object.getPrototypeOf(receiver)) {
        return target;
      }
      return;
    }
    const targetIsArray = isArray(target);
    if (!isReadonly2) {
      let fn;
      if (targetIsArray && (fn = arrayInstrumentations[key])) {
        return fn;
      }
      if (key === "hasOwnProperty") {
        return hasOwnProperty2;
      }
    }
    const res = Reflect.get(
      target,
      key,
      // if this is a proxy wrapping a ref, return methods using the raw ref
      // as receiver so that we don't have to call `toRaw` on the ref in all
      // its class methods
      isRef(target) ? target : receiver
    );
    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key);
    }
    if (isShallow2) {
      return res;
    }
    if (isRef(res)) {
      return targetIsArray && isIntegerKey(key) ? res : res.value;
    }
    if (isObject(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  }
};
var MutableReactiveHandler = class extends BaseReactiveHandler {
  constructor(isShallow2 = false) {
    super(false, isShallow2);
  }
  set(target, key, value, receiver) {
    let oldValue = target[key];
    if (!this._isShallow) {
      const isOldValueReadonly = isReadonly(oldValue);
      if (!isShallow(value) && !isReadonly(value)) {
        oldValue = toRaw(oldValue);
        value = toRaw(value);
      }
      if (!isArray(target) && isRef(oldValue) && !isRef(value)) {
        if (isOldValueReadonly) {
          return false;
        } else {
          oldValue.value = value;
          return true;
        }
      }
    }
    const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
    const result = Reflect.set(
      target,
      key,
      value,
      isRef(target) ? target : receiver
    );
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value, oldValue);
      }
    }
    return result;
  }
  deleteProperty(target, key) {
    const hadKey = hasOwn(target, key);
    const oldValue = target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) {
      trigger(target, "delete", key, void 0, oldValue);
    }
    return result;
  }
  has(target, key) {
    const result = Reflect.has(target, key);
    if (!isSymbol(key) || !builtInSymbols.has(key)) {
      track(target, "has", key);
    }
    return result;
  }
  ownKeys(target) {
    track(
      target,
      "iterate",
      isArray(target) ? "length" : ITERATE_KEY
    );
    return Reflect.ownKeys(target);
  }
};
var ReadonlyReactiveHandler = class extends BaseReactiveHandler {
  constructor(isShallow2 = false) {
    super(true, isShallow2);
  }
  set(target, key) {
    if (true) {
      warn(
        `Set operation on key "${String(key)}" failed: target is readonly.`,
        target
      );
    }
    return true;
  }
  deleteProperty(target, key) {
    if (true) {
      warn(
        `Delete operation on key "${String(key)}" failed: target is readonly.`,
        target
      );
    }
    return true;
  }
};
var mutableHandlers = new MutableReactiveHandler();
var readonlyHandlers = new ReadonlyReactiveHandler();
var shallowReactiveHandlers = new MutableReactiveHandler(true);
var shallowReadonlyHandlers = new ReadonlyReactiveHandler(true);
var toShallow = (value) => value;
var getProto = (v) => Reflect.getPrototypeOf(v);
function createIterableMethod(method, isReadonly2, isShallow2) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(
      rawTarget,
      "iterate",
      isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY
    );
    return {
      // iterator protocol
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
          done
        };
      },
      // iterable protocol
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    if (true) {
      const key = args[0] ? `on key "${args[0]}" ` : ``;
      warn(
        `${capitalize(type)} operation ${key}failed: target is readonly.`,
        toRaw(this)
      );
    }
    return type === "delete" ? false : type === "clear" ? void 0 : this;
  };
}
function createInstrumentations(readonly2, shallow) {
  const instrumentations = {
    get(key) {
      const target = this["__v_raw"];
      const rawTarget = toRaw(target);
      const rawKey = toRaw(key);
      if (!readonly2) {
        if (hasChanged(key, rawKey)) {
          track(rawTarget, "get", key);
        }
        track(rawTarget, "get", rawKey);
      }
      const { has } = getProto(rawTarget);
      const wrap = shallow ? toShallow : readonly2 ? toReadonly : toReactive;
      if (has.call(rawTarget, key)) {
        return wrap(target.get(key));
      } else if (has.call(rawTarget, rawKey)) {
        return wrap(target.get(rawKey));
      } else if (target !== rawTarget) {
        target.get(key);
      }
    },
    get size() {
      const target = this["__v_raw"];
      !readonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
      return Reflect.get(target, "size", target);
    },
    has(key) {
      const target = this["__v_raw"];
      const rawTarget = toRaw(target);
      const rawKey = toRaw(key);
      if (!readonly2) {
        if (hasChanged(key, rawKey)) {
          track(rawTarget, "has", key);
        }
        track(rawTarget, "has", rawKey);
      }
      return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
    },
    forEach(callback, thisArg) {
      const observed = this;
      const target = observed["__v_raw"];
      const rawTarget = toRaw(target);
      const wrap = shallow ? toShallow : readonly2 ? toReadonly : toReactive;
      !readonly2 && track(rawTarget, "iterate", ITERATE_KEY);
      return target.forEach((value, key) => {
        return callback.call(thisArg, wrap(value), wrap(key), observed);
      });
    }
  };
  extend(
    instrumentations,
    readonly2 ? {
      add: createReadonlyMethod("add"),
      set: createReadonlyMethod("set"),
      delete: createReadonlyMethod("delete"),
      clear: createReadonlyMethod("clear")
    } : {
      add(value) {
        if (!shallow && !isShallow(value) && !isReadonly(value)) {
          value = toRaw(value);
        }
        const target = toRaw(this);
        const proto = getProto(target);
        const hadKey = proto.has.call(target, value);
        if (!hadKey) {
          target.add(value);
          trigger(target, "add", value, value);
        }
        return this;
      },
      set(key, value) {
        if (!shallow && !isShallow(value) && !isReadonly(value)) {
          value = toRaw(value);
        }
        const target = toRaw(this);
        const { has, get: get3 } = getProto(target);
        let hadKey = has.call(target, key);
        if (!hadKey) {
          key = toRaw(key);
          hadKey = has.call(target, key);
        } else if (true) {
          checkIdentityKeys(target, has, key);
        }
        const oldValue = get3.call(target, key);
        target.set(key, value);
        if (!hadKey) {
          trigger(target, "add", key, value);
        } else if (hasChanged(value, oldValue)) {
          trigger(target, "set", key, value, oldValue);
        }
        return this;
      },
      delete(key) {
        const target = toRaw(this);
        const { has, get: get3 } = getProto(target);
        let hadKey = has.call(target, key);
        if (!hadKey) {
          key = toRaw(key);
          hadKey = has.call(target, key);
        } else if (true) {
          checkIdentityKeys(target, has, key);
        }
        const oldValue = get3 ? get3.call(target, key) : void 0;
        const result = target.delete(key);
        if (hadKey) {
          trigger(target, "delete", key, void 0, oldValue);
        }
        return result;
      },
      clear() {
        const target = toRaw(this);
        const hadItems = target.size !== 0;
        const oldTarget = true ? isMap(target) ? new Map(target) : new Set(target) : void 0;
        const result = target.clear();
        if (hadItems) {
          trigger(
            target,
            "clear",
            void 0,
            void 0,
            oldTarget
          );
        }
        return result;
      }
    }
  );
  const iteratorMethods = [
    "keys",
    "values",
    "entries",
    Symbol.iterator
  ];
  iteratorMethods.forEach((method) => {
    instrumentations[method] = createIterableMethod(method, readonly2, shallow);
  });
  return instrumentations;
}
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = createInstrumentations(isReadonly2, shallow);
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(
      hasOwn(instrumentations, key) && key in target ? instrumentations : target,
      key,
      receiver
    );
  };
}
var mutableCollectionHandlers = {
  get: createInstrumentationGetter(false, false)
};
var shallowCollectionHandlers = {
  get: createInstrumentationGetter(false, true)
};
var readonlyCollectionHandlers = {
  get: createInstrumentationGetter(true, false)
};
var shallowReadonlyCollectionHandlers = {
  get: createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has, key) {
  const rawKey = toRaw(key);
  if (rawKey !== key && has.call(target, rawKey)) {
    const type = toRawType(target);
    warn(
      `Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`
    );
  }
}
var reactiveMap = /* @__PURE__ */ new WeakMap();
var shallowReactiveMap = /* @__PURE__ */ new WeakMap();
var readonlyMap = /* @__PURE__ */ new WeakMap();
var shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value) {
  return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
}
function reactive(target) {
  if (isReadonly(target)) {
    return target;
  }
  return createReactiveObject(
    target,
    false,
    mutableHandlers,
    mutableCollectionHandlers,
    reactiveMap
  );
}
function readonly(target) {
  return createReactiveObject(
    target,
    true,
    readonlyHandlers,
    readonlyCollectionHandlers,
    readonlyMap
  );
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject(target)) {
    if (true) {
      warn(
        `value cannot be made ${isReadonly2 ? "readonly" : "reactive"}: ${String(
          target
        )}`
      );
    }
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const proxy = new Proxy(
    target,
    targetType === 2 ? collectionHandlers : baseHandlers
  );
  proxyMap.set(target, proxy);
  return proxy;
}
function isReadonly(value) {
  return !!(value && value["__v_isReadonly"]);
}
function isShallow(value) {
  return !!(value && value["__v_isShallow"]);
}
function isProxy(value) {
  return value ? !!value["__v_raw"] : false;
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
var toReactive = (value) => isObject(value) ? reactive(value) : value;
var toReadonly = (value) => isObject(value) ? readonly(value) : value;
function isRef(r) {
  return r ? r["__v_isRef"] === true : false;
}

// node_modules/@dynamic-labs/message-transport/src/index.js
assertPackageVersion("@dynamic-labs/message-transport", version3);

// node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var { iterator: iterator2, toStringTag } = Symbol;
var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray: isArray2 } = Array;
var isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction2(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString2 = typeOfTest("string");
var isFunction2 = typeOfTest("function");
var isNumber = typeOfTest("number");
var isObject2 = (thing) => thing !== null && typeof thing === "object";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject2 = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(toStringTag in val) && !(iterator2 in val);
};
var isDate = kindOfTest("Date");
var isFile = kindOfTest("File");
var isBlob = kindOfTest("Blob");
var isFileList = kindOfTest("FileList");
var isStream = (val) => isObject2(val) && isFunction2(val.pipe);
var isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction2(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction2(thing.toString) && thing.toString() === "[object FormData]"));
};
var isURLSearchParams = kindOfTest("URLSearchParams");
var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray2(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject2(result[targetKey]) && isPlainObject2(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject2(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray2(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
var extend2 = (a, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction2(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, { allOwnKeys });
  return a;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null) return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing) return null;
  if (isArray2(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[iterator2];
  const _iterator = generator.call(obj);
  let result;
  while ((result = _iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest("HTMLFormElement");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
var hasOwnProperty3 = (({ hasOwnProperty: hasOwnProperty4 }) => (obj, prop) => hasOwnProperty4.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest("RegExp");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction2(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction2(value)) return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray2(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction2(thing.append) && thing[toStringTag] === "FormData" && thing[iterator2]);
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject2(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!("toJSON" in source)) {
        stack[i] = source;
        const target = isArray2(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var isAsyncFn = kindOfTest("AsyncFunction");
var isThenable = (thing) => thing && (isObject2(thing) || isFunction2(thing)) && isFunction2(thing.then) && isFunction2(thing.catch);
var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }
  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({ source, data }) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);
    return (cb) => {
      callbacks.push(cb);
      _global.postMessage(token, "*");
    };
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === "function",
  isFunction2(_global.postMessage)
);
var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
var isIterable = (thing) => thing != null && isFunction2(thing[iterator2]);
var utils_default = {
  isArray: isArray2,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString: isString2,
  isNumber,
  isBoolean,
  isObject: isObject2,
  isPlainObject: isPlainObject2,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction: isFunction2,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend: extend2,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty: hasOwnProperty3,
  hasOwnProp: hasOwnProperty3,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap,
  isIterable
};

// node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request2, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request2 && (this.request = request2);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: true });
AxiosError.from = (error, code, config, request2, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code, config, request2, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// node_modules/axios/lib/helpers/null.js
var null_default = null;

// node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue3(value) {
    if (value === null) return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue3(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue3(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue: convertValue3,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value)) return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  if (utils_default.isFunction(options)) {
    options = {
      serialize: options
    };
  }
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}

// node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

// node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default = typeof FormData !== "undefined" ? FormData : null;

// node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default = typeof Blob !== "undefined" ? Blob : null;

// node_modules/axios/lib/platform/browser/index.js
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: Blob_default
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
};

// node_modules/axios/lib/platform/common/utils.js
var utils_exports = {};
__export(utils_exports, {
  hasBrowserEnv: () => hasBrowserEnv,
  hasStandardBrowserEnv: () => hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv,
  navigator: () => _navigator,
  origin: () => origin
});
var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
var _navigator = typeof navigator === "object" && navigator || void 0;
var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
var hasStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
var origin = hasBrowserEnv && window.location.href || "http://localhost";

// node_modules/axios/lib/platform/index.js
var platform_default = {
  ...utils_exports,
  ...browser_default
};

// node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new platform_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    if (name === "__proto__") return true;
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// node_modules/axios/lib/defaults/index.js
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== "SyntaxError") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data) || utils_default.isReadableStream(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (utils_default.isResponse(data) || utils_default.isReadableStream(data)) {
      return data;
    }
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === "SyntaxError") {
            throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform_default.classes.FormData,
    Blob: platform_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
  defaults.headers[method] = {};
});
var defaults_default = defaults;

// node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i = line.indexOf(":");
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};

// node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value)) return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else if (utils_default.isObject(header) && utils_default.isIterable(header)) {
      let obj = {}, dest, key;
      for (const entry of header) {
        if (!utils_default.isArray(entry)) {
          throw TypeError("Object iterator must return a key-value pair");
        }
        obj[key = entry[0]] = (dest = obj[key]) ? utils_default.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]] : entry[1];
      }
      setHeaders(obj, valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;
    while (i--) {
      const key = keys[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  getSetCookie() {
    return this.get("set-cookie") || [];
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1);
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  };
});
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request2) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request2);
  this.name = "CanceledError";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      "Request failed with status code " + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}

// node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// node_modules/axios/lib/helpers/throttle.js
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1e3 / freq;
  let lastArgs;
  let timer;
  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn.apply(null, args);
  };
  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if (passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };
  const flush = () => lastArgs && invoke(lastArgs);
  return [throttled, flush];
}
var throttle_default = throttle;

// node_modules/axios/lib/helpers/progressEventReducer.js
var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return throttle_default((e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e,
      lengthComputable: total != null,
      [isDownloadStream ? "download" : "upload"]: true
    };
    listener(data);
  }, freq);
};
var progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;
  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
};
var asyncDecorator = (fn) => (...args) => utils_default.asap(() => fn(...args));

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url) => {
  url = new URL(url, platform_default.origin);
  return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
})(
  new URL(platform_default.origin),
  platform_default.navigator && /(msie|trident)/i.test(platform_default.navigator.userAgent)
) : () => true;

// node_modules/axios/lib/helpers/cookies.js
var cookies_default = platform_default.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + "=" + encodeURIComponent(value)];
      utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
      utils_default.isString(path) && cookie.push("path=" + path);
      utils_default.isString(domain) && cookie.push("domain=" + domain);
      secure === true && cookie.push("secure");
      document.cookie = cookie.join("; ");
    },
    read(name) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);

// node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

// node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

// node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
  let isRelativeUrl = !isAbsoluteURL(requestedURL);
  if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// node_modules/axios/lib/core/mergeConfig.js
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? { ...thing } : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, prop, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, prop, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a, b, prop, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a, prop, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b, prop) => mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// node_modules/axios/lib/helpers/resolveConfig.js
var resolveConfig_default = (config) => {
  const newConfig = mergeConfig({}, config);
  let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
  newConfig.headers = headers = AxiosHeaders_default.from(headers);
  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);
  if (auth) {
    headers.set(
      "Authorization",
      "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
    );
  }
  let contentType;
  if (utils_default.isFormData(data)) {
    if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(void 0);
    } else if ((contentType = headers.getContentType()) !== false) {
      const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
      headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
    }
  }
  if (platform_default.hasStandardBrowserEnv) {
    withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(newConfig.url)) {
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies_default.read(xsrfCookieName);
      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }
  return newConfig;
};

// node_modules/axios/lib/adapters/xhr.js
var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = resolveConfig_default(config);
    let requestData = _config.data;
    const requestHeaders = AxiosHeaders_default.from(_config.headers).normalize();
    let { responseType, onUploadProgress, onDownloadProgress } = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;
    function done() {
      flushUpload && flushUpload();
      flushDownload && flushDownload();
      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
      _config.signal && _config.signal.removeEventListener("abort", onCanceled);
    }
    let request2 = new XMLHttpRequest();
    request2.open(_config.method.toUpperCase(), _config.url, true);
    request2.timeout = _config.timeout;
    function onloadend() {
      if (!request2) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        "getAllResponseHeaders" in request2 && request2.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request2.responseText : request2.response;
      const response = {
        data: responseData,
        status: request2.status,
        statusText: request2.statusText,
        headers: responseHeaders,
        config,
        request: request2
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request2 = null;
    }
    if ("onloadend" in request2) {
      request2.onloadend = onloadend;
    } else {
      request2.onreadystatechange = function handleLoad() {
        if (!request2 || request2.readyState !== 4) {
          return;
        }
        if (request2.status === 0 && !(request2.responseURL && request2.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request2.onabort = function handleAbort() {
      if (!request2) {
        return;
      }
      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request2));
      request2 = null;
    };
    request2.onerror = function handleError() {
      reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request2));
      request2 = null;
    };
    request2.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = _config.transitional || transitional_default;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config,
        request2
      ));
      request2 = null;
    };
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request2) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request2.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(_config.withCredentials)) {
      request2.withCredentials = !!_config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request2.responseType = _config.responseType;
    }
    if (onDownloadProgress) {
      [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
      request2.addEventListener("progress", downloadThrottled);
    }
    if (onUploadProgress && request2.upload) {
      [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
      request2.upload.addEventListener("progress", uploadThrottled);
      request2.upload.addEventListener("loadend", flushUpload);
    }
    if (_config.cancelToken || _config.signal) {
      onCanceled = (cancel) => {
        if (!request2) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request2) : cancel);
        request2.abort();
        request2 = null;
      };
      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(_config.url);
    if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request2.send(requestData || null);
  });
};

// node_modules/axios/lib/helpers/composeSignals.js
var composeSignals = (signals, timeout) => {
  const { length } = signals = signals ? signals.filter(Boolean) : [];
  if (timeout || length) {
    let controller = new AbortController();
    let aborted;
    const onabort = function(reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof AxiosError_default ? err : new CanceledError_default(err instanceof Error ? err.message : err));
      }
    };
    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new AxiosError_default(`timeout ${timeout} of ms exceeded`, AxiosError_default.ETIMEDOUT));
    }, timeout);
    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach((signal2) => {
          signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
        });
        signals = null;
      }
    };
    signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
    const { signal } = controller;
    signal.unsubscribe = () => utils_default.asap(unsubscribe);
    return signal;
  }
};
var composeSignals_default = composeSignals;

// node_modules/axios/lib/helpers/trackStream.js
var streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;
  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }
  let pos = 0;
  let end;
  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
};
var readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of readStream(iterable)) {
    yield* streamChunk(chunk, chunkSize);
  }
};
var readStream = async function* (stream) {
  if (stream[Symbol.asyncIterator]) {
    yield* stream;
    return;
  }
  const reader = stream.getReader();
  try {
    for (; ; ) {
      const { done, value } = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
};
var trackStream = (stream, chunkSize, onProgress, onFinish) => {
  const iterator3 = readBytes(stream, chunkSize);
  let bytes = 0;
  let done;
  let _onFinish = (e) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e);
    }
  };
  return new ReadableStream({
    async pull(controller) {
      try {
        const { done: done2, value } = await iterator3.next();
        if (done2) {
          _onFinish();
          controller.close();
          return;
        }
        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator3.return();
    }
  }, {
    highWaterMark: 2
  });
};

// node_modules/axios/lib/adapters/fetch.js
var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
var test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e) {
    return false;
  }
};
var supportsRequestStream = isReadableStreamSupported && test(() => {
  let duplexAccessed = false;
  const hasContentType = new Request(platform_default.origin, {
    body: new ReadableStream(),
    method: "POST",
    get duplex() {
      duplexAccessed = true;
      return "half";
    }
  }).headers.has("Content-Type");
  return duplexAccessed && !hasContentType;
});
var DEFAULT_CHUNK_SIZE = 64 * 1024;
var supportsResponseStream = isReadableStreamSupported && test(() => utils_default.isReadableStream(new Response("").body));
var resolvers = {
  stream: supportsResponseStream && ((res) => res.body)
};
isFetchSupported && ((res) => {
  ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
    !resolvers[type] && (resolvers[type] = utils_default.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
      throw new AxiosError_default(`Response type '${type}' is not supported`, AxiosError_default.ERR_NOT_SUPPORT, config);
    });
  });
})(new Response());
var getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }
  if (utils_default.isBlob(body)) {
    return body.size;
  }
  if (utils_default.isSpecCompliantForm(body)) {
    const _request = new Request(platform_default.origin, {
      method: "POST",
      body
    });
    return (await _request.arrayBuffer()).byteLength;
  }
  if (utils_default.isArrayBufferView(body) || utils_default.isArrayBuffer(body)) {
    return body.byteLength;
  }
  if (utils_default.isURLSearchParams(body)) {
    body = body + "";
  }
  if (utils_default.isString(body)) {
    return (await encodeText(body)).byteLength;
  }
};
var resolveBodyLength = async (headers, body) => {
  const length = utils_default.toFiniteNumber(headers.getContentLength());
  return length == null ? getBodyLength(body) : length;
};
var fetch_default = isFetchSupported && (async (config) => {
  let {
    url,
    method,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = "same-origin",
    fetchOptions
  } = resolveConfig_default(config);
  responseType = responseType ? (responseType + "").toLowerCase() : "text";
  let composedSignal = composeSignals_default([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
  let request2;
  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
    composedSignal.unsubscribe();
  });
  let requestContentLength;
  try {
    if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
      let _request = new Request(url, {
        method: "POST",
        body: data,
        duplex: "half"
      });
      let contentTypeHeader;
      if (utils_default.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
        headers.setContentType(contentTypeHeader);
      }
      if (_request.body) {
        const [onProgress, flush] = progressEventDecorator(
          requestContentLength,
          progressEventReducer(asyncDecorator(onUploadProgress))
        );
        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
      }
    }
    if (!utils_default.isString(withCredentials)) {
      withCredentials = withCredentials ? "include" : "omit";
    }
    const isCredentialsSupported = "credentials" in Request.prototype;
    request2 = new Request(url, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      credentials: isCredentialsSupported ? withCredentials : void 0
    });
    let response = await fetch(request2);
    const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
    if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
      const options = {};
      ["status", "statusText", "headers"].forEach((prop) => {
        options[prop] = response[prop];
      });
      const responseContentLength = utils_default.toFiniteNumber(response.headers.get("content-length"));
      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
        responseContentLength,
        progressEventReducer(asyncDecorator(onDownloadProgress), true)
      ) || [];
      response = new Response(
        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
          flush && flush();
          unsubscribe && unsubscribe();
        }),
        options
      );
    }
    responseType = responseType || "text";
    let responseData = await resolvers[utils_default.findKey(resolvers, responseType) || "text"](response, config);
    !isStreamResponse && unsubscribe && unsubscribe();
    return await new Promise((resolve, reject) => {
      settle(resolve, reject, {
        data: responseData,
        headers: AxiosHeaders_default.from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request: request2
      });
    });
  } catch (err) {
    unsubscribe && unsubscribe();
    if (err && err.name === "TypeError" && /Load failed|fetch/i.test(err.message)) {
      throw Object.assign(
        new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request2),
        {
          cause: err.cause || err
        }
      );
    }
    throw AxiosError_default.from(err, err && err.code, config, request2);
  }
});

// node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: null_default,
  xhr: xhr_default,
  fetch: fetch_default
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
var renderReason = (reason) => `- ${reason}`;
var isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    const rejectedReasons = {};
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;
      adapter = nameOrAdapter;
      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
        if (adapter === void 0) {
          throw new AxiosError_default(`Unknown adapter '${id}'`);
        }
      }
      if (adapter) {
        break;
      }
      rejectedReasons[id || "#" + i] = adapter;
    }
    if (!adapter) {
      const reasons = Object.entries(rejectedReasons).map(
        ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
      );
      let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
      throw new AxiosError_default(
        `There is no suitable adapter to dispatch the request ` + s,
        "ERR_NOT_SUPPORT"
      );
    }
    return adapter;
  },
  adapters: knownAdapters
};

// node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// node_modules/axios/lib/env/data.js
var VERSION2 = "1.9.0";

// node_modules/axios/lib/helpers/validator.js
var validators = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version6, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION2 + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(opt, " has been removed" + (version6 ? " in " + version6 : "")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version6 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version6 + " and will be removed in the near future"
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
validators.spelling = function spelling(correctSpelling) {
  return (value, opt) => {
    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
    return true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig || {};
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy = {};
        Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
        try {
          if (!err.stack) {
            err.stack = stack;
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
            err.stack += "\n" + stack;
          }
        } catch (e) {
        }
      }
      throw err;
    }
  }
  _request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator_default.assertOptions(paramsSerializer, {
          encode: validators2.function,
          serialize: validators2.function
        }, true);
      }
    }
    if (config.allowAbsoluteUrls !== void 0) {
    } else if (this.defaults.allowAbsoluteUrls !== void 0) {
      config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
    } else {
      config.allowAbsoluteUrls = true;
    }
    validator_default.assertOptions(config, {
      baseUrl: validators2.spelling("baseURL"),
      withXsrfToken: validators2.spelling("withXSRFToken")
    }, true);
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config.method]
    );
    headers && utils_default.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// node_modules/axios/lib/cancel/CancelToken.js
var CancelToken = class _CancelToken {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners) return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request2) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request2);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  toAbortSignal() {
    const controller = new AbortController();
    const abort = (err) => {
      controller.abort(err);
    };
    this.subscribe(abort);
    controller.signal.unsubscribe = () => this.unsubscribe(abort);
    return controller.signal;
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new _CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create2(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION2;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.getAdapter = adapters_default.getAdapter;
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION3,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  getAdapter,
  mergeConfig: mergeConfig2
} = axios_default;

// node_modules/@dynamic-labs-wallet/core/node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;

// node_modules/@dynamic-labs-wallet/core/node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/@dynamic-labs-wallet/core/node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  return Uint8Array.of((v = parseInt(uuid.slice(0, 8), 16)) >>> 24, v >>> 16 & 255, v >>> 8 & 255, v & 255, (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255, v / 4294967296 & 255, v >>> 24 & 255, v >>> 16 & 255, v >>> 8 & 255, v & 255);
}
var parse_default = parse;

// node_modules/@dynamic-labs-wallet/core/node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/@dynamic-labs-wallet/core/node_modules/uuid/dist/esm-browser/rng.js
var rnds8 = new Uint8Array(16);

// node_modules/@dynamic-labs-wallet/core/node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  const words = uint8ToUint32(bytes);
  const md5Bytes = wordsToMd5(words, bytes.length * 8);
  return uint32ToUint8(md5Bytes);
}
function uint32ToUint8(input) {
  const bytes = new Uint8Array(input.length * 4);
  for (let i = 0; i < input.length * 4; i++) {
    bytes[i] = input[i >> 2] >>> i % 4 * 8 & 255;
  }
  return bytes;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  const xpad = new Uint32Array(getOutputLength(len)).fill(0);
  xpad.set(x);
  xpad[len >> 5] |= 128 << len % 32;
  xpad[xpad.length - 1] = len;
  x = xpad;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;
  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return Uint32Array.of(a, b, c, d);
}
function uint8ToUint32(input) {
  if (input.length === 0) {
    return new Uint32Array();
  }
  const output = new Uint32Array(getOutputLength(input.length * 8)).fill(0);
  for (let i = 0; i < input.length; i++) {
    output[i >> 2] |= (input[i] & 255) << i % 4 * 8;
  }
  return output;
}
function safeAdd(x, y) {
  const lsw = (x & 65535) + (y & 65535);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
var md5_default = md5;

// node_modules/@dynamic-labs-wallet/core/node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = new Uint8Array(str.length);
  for (let i = 0; i < str.length; ++i) {
    bytes[i] = str.charCodeAt(i);
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(version6, hash, value, namespace, buf, offset) {
  const valueBytes = typeof value === "string" ? stringToBytes(value) : value;
  const namespaceBytes = typeof namespace === "string" ? parse_default(namespace) : namespace;
  if (typeof namespace === "string") {
    namespace = parse_default(namespace);
  }
  if ((namespace == null ? void 0 : namespace.length) !== 16) {
    throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
  }
  let bytes = new Uint8Array(16 + valueBytes.length);
  bytes.set(namespaceBytes);
  bytes.set(valueBytes, namespaceBytes.length);
  bytes = hash(bytes);
  bytes[6] = bytes[6] & 15 | version6;
  bytes[8] = bytes[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = bytes[i];
    }
    return buf;
  }
  return unsafeStringify(bytes);
}

// node_modules/@dynamic-labs-wallet/core/node_modules/uuid/dist/esm-browser/v3.js
function v3(value, namespace, buf, offset) {
  return v35(48, md5_default, value, namespace, buf, offset);
}
v3.DNS = DNS;
v3.URL = URL2;

// node_modules/@dynamic-labs-wallet/core/node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);

// node_modules/@dynamic-labs-wallet/core/node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  const K = [1518500249, 1859775393, 2400959708, 3395469782];
  const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  const newBytes = new Uint8Array(bytes.length + 1);
  newBytes.set(bytes);
  newBytes[bytes.length] = 128;
  bytes = newBytes;
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);
  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);
    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }
    M[i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);
    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }
    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }
    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];
    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return Uint8Array.of(H[0] >> 24, H[0] >> 16, H[0] >> 8, H[0], H[1] >> 24, H[1] >> 16, H[1] >> 8, H[1], H[2] >> 24, H[2] >> 16, H[2] >> 8, H[2], H[3] >> 24, H[3] >> 16, H[3] >> 8, H[3], H[4] >> 24, H[4] >> 16, H[4] >> 8, H[4]);
}
var sha1_default = sha1;

// node_modules/@dynamic-labs-wallet/core/node_modules/uuid/dist/esm-browser/v5.js
function v5(value, namespace, buf, offset) {
  return v35(80, sha1_default, value, namespace, buf, offset);
}
v5.DNS = DNS;
v5.URL = URL2;

// node_modules/@dynamic-labs-wallet/core/index.esm.js
var ENVIRONMENT_ENUM = function(ENVIRONMENT_ENUM2) {
  ENVIRONMENT_ENUM2["development"] = "development";
  ENVIRONMENT_ENUM2["preprod"] = "preprod";
  ENVIRONMENT_ENUM2["production"] = "production";
  return ENVIRONMENT_ENUM2;
}({});
var WalletOperation = function(WalletOperation2) {
  WalletOperation2["REACH_THRESHOLD"] = "REACH_THRESHOLD";
  WalletOperation2["REACH_ALL_PARTIES"] = "REACH_ALL_PARTIES";
  WalletOperation2["SIGN_MESSAGE"] = "SIGN_MESSAGE";
  WalletOperation2["SIGN_TRANSACTION"] = "SIGN_TRANSACTION";
  WalletOperation2["REFRESH"] = "REFRESH";
  WalletOperation2["RESHARE"] = "RESHARE";
  WalletOperation2["EXPORT_PRIVATE_KEY"] = "EXPORT_PRIVATE_KEY";
  WalletOperation2["NO_OPERATION"] = "NO_OPERATION";
  return WalletOperation2;
}({});
var BackupLocation = function(BackupLocation2) {
  BackupLocation2["DYNAMIC"] = "dynamic";
  BackupLocation2["GOOGLE_DRIVE"] = "googleDrive";
  BackupLocation2["ICLOUD"] = "iCloud";
  BackupLocation2["USER"] = "user";
  BackupLocation2["EXTERNAL"] = "external";
  return BackupLocation2;
}({});
var IFRAME_DOMAIN_MAP = {
  development: "http://localhost:4200",
  preprod: "https://app.dynamic-preprod.xyz",
  production: "https://app.dynamicauth.com"
};
var SigningAlgorithm = function(SigningAlgorithm2) {
  SigningAlgorithm2["ECDSA"] = "ECDSA";
  SigningAlgorithm2["ED25519"] = "ED25519";
  SigningAlgorithm2["BIP340"] = "BIP340";
  return SigningAlgorithm2;
}({});
var BITCOIN_DERIVATION_PATHS = {
  LEGACY: [
    44,
    0,
    0,
    0,
    0
  ],
  // m/49'/0'/0'/0/0  - SegWit (P2SH-P2WPKH)
  NATIVE_SEGWIT: [
    84,
    0,
    0,
    0,
    0
  ],
  // m/44'/0'/0'/0/0  - Legacy (P2PKH)
  SEGWIT: [
    49,
    0,
    0,
    0,
    0
  ]
};
var MPC_CHAIN_CONFIG = {
  EVM: {
    // Uses secp256k1 ECDSA
    derivationPath: [
      44,
      60,
      0,
      0,
      0
    ],
    signingAlgorithm: "ECDSA"
  },
  SVM: {
    // Uses Ed25519
    derivationPath: [
      44,
      501,
      0,
      0,
      0
    ],
    signingAlgorithm: "ED25519"
  },
  BTC: {
    // Uses secp256k1 BIP340
    derivationPath: BITCOIN_DERIVATION_PATHS.NATIVE_SEGWIT,
    signingAlgorithm: "BIP340"
  },
  COSMOS: {
    // Uses Ed25519
    derivationPath: [
      44,
      118,
      0,
      0,
      0
    ],
    signingAlgorithm: "ED25519"
  },
  FLOW: {
    // Uses Ed25519
    derivationPath: [
      44,
      539,
      0,
      0,
      0
    ],
    signingAlgorithm: "ED25519"
  },
  SUI: {
    // Uses Ed25519
    derivationPath: [
      44,
      784,
      0,
      0,
      0
    ],
    signingAlgorithm: "ED25519"
  }
};
var ThresholdSignatureScheme = function(ThresholdSignatureScheme2) {
  ThresholdSignatureScheme2["TWO_OF_TWO"] = "TWO_OF_TWO";
  ThresholdSignatureScheme2["TWO_OF_THREE"] = "TWO_OF_THREE";
  ThresholdSignatureScheme2["THREE_OF_FIVE"] = "THREE_OF_FIVE";
  return ThresholdSignatureScheme2;
}({});
var CreateRoomPartiesOptions = function(CreateRoomPartiesOptions2) {
  CreateRoomPartiesOptions2["THRESHOLD"] = "threshold";
  CreateRoomPartiesOptions2["FULL"] = "full";
  return CreateRoomPartiesOptions2;
}({});
var URL_PATTERNS = {
  [ENVIRONMENT_ENUM.development]: /^http:\/\/localhost:\d+$/,
  [ENVIRONMENT_ENUM.preprod]: /dynamic-preprod/,
  [ENVIRONMENT_ENUM.production]: /^(?!.*dynamic-preprod)(?!http:\/\/localhost:\d+).*/
};
function getEnvironmentFromUrl(url) {
  if (!url) {
    return ENVIRONMENT_ENUM.production;
  }
  if (URL_PATTERNS[ENVIRONMENT_ENUM.development].test(url)) {
    return ENVIRONMENT_ENUM.development;
  }
  if (URL_PATTERNS[ENVIRONMENT_ENUM.preprod].test(url)) {
    return ENVIRONMENT_ENUM.preprod;
  }
  return ENVIRONMENT_ENUM.production;
}
var SuccessEventType = function(SuccessEventType2) {
  SuccessEventType2["KeygenComplete"] = "keygen_complete";
  SuccessEventType2["RoomCreated"] = "room_created";
  SuccessEventType2["CeremonyComplete"] = "ceremony_complete";
  return SuccessEventType2;
}({});

// node_modules/@dynamic-labs-wallet/browser-wallet-client/index.esm.js
var setupMessageTransportBridge = (messageTransport, iframe, iframeOrigin) => {
  if (!(iframe == null ? void 0 : iframe.contentWindow)) {
    throw new Error("Iframe or contentWindow not available");
  }
  const logger5 = new Logger("debug");
  messageTransport.on((message) => {
    if (message.origin === "host") {
      var _iframe_contentWindow;
      iframe == null ? void 0 : (_iframe_contentWindow = iframe.contentWindow) == null ? void 0 : _iframe_contentWindow.postMessage(message, iframeOrigin);
    }
  });
  const handleIncomingMessage = (message) => {
    const { data } = message;
    if (!data) return;
    if ((data == null ? void 0 : data.origin) !== "webview") {
      return;
    }
    if (typeof data !== "object") {
      return;
    }
    try {
      const message2 = parseMessageTransportData(data);
      messageTransport.emit(message2);
    } catch (error) {
      if (!(error instanceof SyntaxError)) {
        logger5.error("Error handling incoming message:", error);
      }
    }
  };
  document.addEventListener("message", handleIncomingMessage);
  window.addEventListener("message", handleIncomingMessage);
};
var iframeMessageHandler = class {
  async getWallets(request2) {
    return this.requestChannel.request("getWallets", request2);
  }
  async getWallet({ chainName, accountAddress, walletOperation, signedSessionId }) {
    return this.requestChannel.request("getWallet", {
      chainName,
      accountAddress,
      walletOperation,
      signedSessionId
    });
  }
  async createWalletAccount(request2) {
    return this.requestChannel.request("createWalletAccount", request2);
  }
  async requiresPasswordForOperation(request2) {
    return this.requestChannel.request("requiresPasswordForOperation", request2);
  }
  async signMessage(request2) {
    return this.requestChannel.request("signMessage", request2);
  }
  async signRawMessage(request2) {
    return this.requestChannel.request("signRawMessage", request2);
  }
  async signTransaction(request2) {
    return this.requestChannel.request("signTransaction", request2);
  }
  async isPasswordEncrypted(request2) {
    return this.requestChannel.request("isPasswordEncrypted", request2);
  }
  async backupKeySharesToGoogleDrive(request2) {
    await this.requestChannel.request("backupKeySharesToGoogleDrive", request2);
  }
  async restoreBackupFromGoogleDrive(request2) {
    return this.requestChannel.request("restoreBackupFromGoogleDrive", request2);
  }
  async refreshWalletAccountShares(request2) {
    return this.requestChannel.request("refreshWalletAccountShares", request2);
  }
  async reshare(request2) {
    return this.requestChannel.request("reshare", request2);
  }
  async exportPrivateKey(request2) {
    return this.requestChannel.request("exportPrivateKey", request2);
  }
  async verifyPassword(request2) {
    return this.requestChannel.request("verifyPassword", request2);
  }
  async updatePassword(request2) {
    return this.requestChannel.request("updatePassword", request2);
  }
  async importPrivateKey(request2) {
    return this.requestChannel.request("importPrivateKey", request2);
  }
  async sendAuthToken(token) {
    return this.requestChannel.request("sendAuthToken", token);
  }
  async exportClientKeyshares(request2) {
    return this.requestChannel.request("exportClientKeyshares", request2);
  }
  async offlineExportPrivateKey(request2) {
    return this.requestChannel.request("offlineExportPrivateKey", request2);
  }
  async cleanup() {
    return this.requestChannel.request("cleanup");
  }
  constructor(messageTransport) {
    this.requestChannel = createRequestChannel(messageTransport);
  }
};
var logger4 = new Logger("DynamicWaasWalletClient");
var DynamicWalletClient = class _DynamicWalletClient {
  // Simply load the iframe from localhost
  async initialize() {
    await this.doInitializeIframeCommunication();
  }
  /**
  * this is called on class construction time
  * @returns {Promise<void>} that resolves when the iframe is loaded and the message transport and iframe storage are initialized
  */
  initializeIframeCommunication() {
    if (!_DynamicWalletClient.iframeLoadPromise) {
      _DynamicWalletClient.iframeLoadPromise = this.doInitializeIframeCommunication();
    }
    return _DynamicWalletClient.iframeLoadPromise;
  }
  /**
  * initialize the iframe communication by awaiting the iframe load promise
  * and initializing the message transport and iframe storage after iframe is successfully loaded
  */
  async doInitializeIframeCommunication() {
    try {
      await this.loadIframe();
    } catch (error) {
      this.logger.error("Error initializing iframe:", error);
      throw error;
    }
  }
  /**
  * initialize the message transport after iframe is successfully loaded
  */
  async initializeMessageTransport() {
    await this.initializeIframeCommunication();
    const transport = applyDefaultMessageOrigin({
      defaultOrigin: "host",
      messageTransport: createMessageTransport()
    });
    this.messageTransport = transport;
    if (!this.iframe) {
      throw new Error("Iframe not available");
    }
    setupMessageTransportBridge(this.messageTransport, this.iframe, this.iframeDomain);
    this.iframeMessageHandler = new iframeMessageHandler(this.messageTransport);
    await this.initAuthToken();
  }
  /**
  * securely exchange the auth token with iframe securely
  */
  async initAuthToken() {
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    try {
      await this.iframeMessageHandler.sendAuthToken(this.authToken);
    } catch (error) {
      throw new Error("Failed to establish secure token exchange: " + error);
    }
  }
  async loadIframe() {
    if (_DynamicWalletClient.sharedIframe) {
      this.iframe = _DynamicWalletClient.sharedIframe;
      _DynamicWalletClient.iframeInstanceCount++;
      return Promise.resolve();
    }
    if (_DynamicWalletClient.iframeLoadPromise) {
      return _DynamicWalletClient.iframeLoadPromise.then(() => {
        this.iframe = _DynamicWalletClient.sharedIframe;
        _DynamicWalletClient.iframeInstanceCount++;
      });
    }
    _DynamicWalletClient.iframeLoadPromise = new Promise((resolve, reject) => {
      const iframe = document.createElement("iframe");
      const iframeTimeoutId = setTimeout(() => {
        reject(new Error("Iframe load timeout"));
      }, 1e4);
      iframe.style.display = "none";
      iframe.setAttribute("title", "Dynamic Wallet Iframe");
      iframe.setAttribute("sandbox", "allow-scripts allow-same-origin allow-downloads");
      iframe.setAttribute("referrerpolicy", "origin");
      iframe.style.position = "fixed";
      iframe.style.top = "0";
      iframe.style.left = "0";
      iframe.style.width = "0";
      iframe.style.height = "0";
      iframe.style.border = "none";
      iframe.style.pointerEvents = "none";
      var _this_instanceId;
      const params = new URLSearchParams({
        instanceId: (_this_instanceId = this.instanceId) != null ? _this_instanceId : "",
        hostOrigin: window.location.origin,
        environmentId: this.environmentId,
        baseApiUrl: this.baseApiUrl,
        baseMPCRelayApiUrl: this.baseMPCRelayApiUrl
      });
      iframe.src = `${this.iframeDomain}/waas-v1/${this.environmentId}?${params.toString()}`;
      this.logger.debug("Creating iframe with src:", iframe.src);
      document.body.appendChild(iframe);
      iframe.onload = () => {
        clearTimeout(iframeTimeoutId);
        _DynamicWalletClient.sharedIframe = iframe;
        this.iframe = iframe;
        _DynamicWalletClient.iframeInstanceCount++;
        resolve();
      };
      iframe.onerror = (error) => {
        clearTimeout(iframeTimeoutId);
        this.logger.error("Iframe failed to load:", error);
        reject(new Error("Failed to load iframe"));
      };
    });
    return _DynamicWalletClient.iframeLoadPromise;
  }
  /**
  * Load an iframe for a specific container
  * @param {HTMLElement} container - The container to which the iframe will be attached
  * @returns {Promise<HTMLIFrameElement>} that resolves when the iframe is loaded
  */
  loadIframeForContainer(container) {
    return new Promise((resolve, reject) => {
      const iframe = document.createElement("iframe");
      const iframeTimeoutId = setTimeout(() => {
        reject(new Error("Iframe load timeout"));
      }, 1e4);
      iframe.style.display = "block";
      iframe.style.width = "100%";
      iframe.style.height = "100%";
      iframe.setAttribute("title", "Dynamic Wallet Storage");
      iframe.setAttribute("sandbox", "allow-scripts allow-same-origin");
      iframe.setAttribute("referrerpolicy", "origin");
      var _this_instanceId;
      const params = new URLSearchParams({
        instanceId: (_this_instanceId = this.instanceId) != null ? _this_instanceId : "",
        hostOrigin: window.location.origin,
        environmentId: this.environmentId,
        baseApiUrl: this.baseApiUrl,
        baseMPCRelayApiUrl: this.baseMPCRelayApiUrl,
        chain: this.chainName
      });
      iframe.src = `${this.iframeDomain}/waas-v1/${this.environmentId}?${params.toString()}`;
      this.logger.debug("Creating iframe with src:", iframe.src);
      container.appendChild(iframe);
      iframe.onload = () => {
        clearTimeout(iframeTimeoutId);
        this.logger.debug("Iframe loaded successfully");
        resolve(iframe);
      };
      iframe.onerror = (error) => {
        clearTimeout(iframeTimeoutId);
        this.logger.error("Iframe failed to load:", error);
        reject(new Error("Failed to load iframe"));
      };
    });
  }
  /**
  * Initializes the iframe display for a specific container.
  *
  * @param {HTMLElement} container - The container to which the iframe will be attached.
  * @returns:
  *   iframe: HTMLIFrameElement;
  *   iframeDisplay: IframeDisplayChannelAdapter;
  *   cleanup: () => void;
  */
  async initializeIframeDisplayForContainer({ container }) {
    try {
      const iframe = await this.loadIframeForContainer(container);
      const transport = applyDefaultMessageOrigin({
        defaultOrigin: "host",
        messageTransport: createMessageTransport()
      });
      setupMessageTransportBridge(transport, iframe, this.iframeDomain);
      const iframeDisplay = new iframeMessageHandler(transport);
      await iframeDisplay.sendAuthToken(this.authToken);
      return {
        iframe,
        iframeDisplay,
        cleanup: () => {
          container.removeChild(iframe);
        }
      };
    } catch (error) {
      this.logger.error("Error initializing iframe:", error);
      throw error;
    }
  }
  async getWallets() {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    return this.iframeMessageHandler.getWallets({
      chainName: this.chainName
    });
  }
  async getWallet({ accountAddress, walletOperation = WalletOperation.NO_OPERATION, signedSessionId }) {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    return this.iframeMessageHandler.getWallet({
      chainName: this.chainName,
      accountAddress,
      walletOperation,
      signedSessionId
    });
  }
  async createWalletAccount({ thresholdSignatureScheme, password = void 0, signedSessionId }) {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    return this.iframeMessageHandler.createWalletAccount({
      chainName: this.chainName,
      thresholdSignatureScheme,
      password,
      signedSessionId
    });
  }
  async requiresPasswordForOperation({ accountAddress, walletOperation = WalletOperation.REACH_THRESHOLD }) {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    return this.iframeMessageHandler.requiresPasswordForOperation({
      chainName: this.chainName,
      accountAddress,
      walletOperation
    });
  }
  async isPasswordEncrypted({ accountAddress }) {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    return this.iframeMessageHandler.isPasswordEncrypted({
      chainName: this.chainName,
      accountAddress
    });
  }
  async signMessage({ message, accountAddress, password = void 0, signedSessionId }) {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    return this.iframeMessageHandler.signMessage({
      chainName: this.chainName,
      message,
      accountAddress,
      password,
      signedSessionId
    });
  }
  async signRawMessage({ message, accountAddress, password = void 0, signedSessionId }) {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    return this.iframeMessageHandler.signRawMessage({
      chainName: this.chainName,
      message,
      accountAddress,
      password,
      signedSessionId
    });
  }
  /**
  * Signs a transaction and returns the signature, @transaction is a string of the serialized transaction
  * EVM:
  *   transaction = serializeTransaction()
  * SOL:
  *   const messageBytes = transaction.serializeMessage();
  *   const messageToSign = Buffer.from(messageBytes).toString("hex");
  * SUI:
  *  const txBytes = await txb.build({ client });
  *  const txString = Buffer.from(txBytes).toString("hex");
  */
  async signTransaction({ senderAddress, transaction, password = void 0, signedSessionId }) {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    return this.iframeMessageHandler.signTransaction({
      chainName: this.chainName,
      senderAddress,
      transaction,
      password,
      signedSessionId
    });
  }
  async backupKeySharesToGoogleDrive({ accountAddress, password = void 0, signedSessionId }) {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    return this.iframeMessageHandler.backupKeySharesToGoogleDrive({
      chainName: this.chainName,
      accountAddress,
      password,
      signedSessionId
    });
  }
  async restoreBackupFromGoogleDrive({ accountAddress, displayContainer, password, signedSessionId }) {
    const { iframeDisplay } = await this.initializeIframeDisplayForContainer({
      container: displayContainer
    });
    if (!iframeDisplay) {
      throw new Error("Failed to initialize iframe handler with display functionality");
    }
    return iframeDisplay.restoreBackupFromGoogleDrive({
      chainName: this.chainName,
      accountAddress,
      password,
      signedSessionId
    });
  }
  async refreshWalletAccountShares({ accountAddress, password, signedSessionId }) {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    return this.iframeMessageHandler.refreshWalletAccountShares({
      chainName: this.chainName,
      accountAddress,
      password,
      signedSessionId
    });
  }
  async reshare({ accountAddress, oldThresholdSignatureScheme, newThresholdSignatureScheme, password, signedSessionId }) {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    return this.iframeMessageHandler.reshare({
      chainName: this.chainName,
      accountAddress,
      oldThresholdSignatureScheme,
      newThresholdSignatureScheme,
      password,
      signedSessionId
    });
  }
  async exportPrivateKey({ accountAddress, displayContainer, password, signedSessionId }) {
    const { iframeDisplay } = await this.initializeIframeDisplayForContainer({
      container: displayContainer
    });
    if (!iframeDisplay) {
      throw new Error("Failed to initialize iframe handler with display functionality");
    }
    return iframeDisplay.exportPrivateKey({
      chainName: this.chainName,
      accountAddress,
      password,
      signedSessionId
    });
  }
  async verifyPassword({ accountAddress, password, walletOperation = WalletOperation.NO_OPERATION, signedSessionId }) {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    return this.iframeMessageHandler.verifyPassword({
      chainName: this.chainName,
      accountAddress,
      password,
      walletOperation,
      signedSessionId
    });
  }
  async updatePassword({ accountAddress, existingPassword, newPassword, signedSessionId }) {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    return this.iframeMessageHandler.updatePassword({
      chainName: this.chainName,
      accountAddress,
      existingPassword,
      newPassword,
      signedSessionId
    });
  }
  async importPrivateKey({ privateKey, thresholdSignatureScheme }) {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    return this.iframeMessageHandler.importPrivateKey({
      chainName: this.chainName,
      privateKey,
      thresholdSignatureScheme
    });
  }
  async exportClientKeyshares({ accountAddress, password, signedSessionId }) {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    return this.iframeMessageHandler.exportClientKeyshares({
      chainName: this.chainName,
      accountAddress,
      password,
      signedSessionId
    });
  }
  /**
  * keyShares is stringified list of EcdsaKeygenResult[] and Ed25519KeygenResult[]
  */
  async offlineExportPrivateKey({ keyShares, derivationPath }) {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    const args = {
      chainName: this.chainName,
      keyShares,
      derivationPath
    };
    const serializedArgs = JSON.stringify(args);
    const argsBuffer = new TextEncoder().encode(serializedArgs);
    const base64Args = Buffer.from(argsBuffer).toString("base64");
    return this.iframeMessageHandler.offlineExportPrivateKey({
      chainName: this.chainName,
      base64Args
    });
  }
  async cleanup() {
    await this.initializeMessageTransport();
    if (!this.iframeMessageHandler) {
      throw new Error("Iframe message handler not initialized");
    }
    await this.iframeMessageHandler.cleanup();
    if (this.iframe) {
      _DynamicWalletClient.iframeInstanceCount--;
      if (_DynamicWalletClient.sharedIframe && _DynamicWalletClient.iframeInstanceCount === 0) {
        document.body.removeChild(_DynamicWalletClient.sharedIframe);
        _DynamicWalletClient.sharedIframe = null;
        _DynamicWalletClient.iframeLoadPromise = null;
      }
      this.iframe = null;
    }
  }
  constructor({ environmentId, authToken, baseApiUrl, baseMPCRelayApiUrl, chainName, debug }) {
    this.logger = logger4;
    this.instanceId = null;
    this.iframeDomain = null;
    this.messageTransport = null;
    this.iframeMessageHandler = null;
    this.iframe = null;
    this.environmentId = environmentId;
    this.authToken = authToken;
    this.baseApiUrl = baseApiUrl;
    this.baseMPCRelayApiUrl = baseMPCRelayApiUrl;
    this.chainName = chainName;
    const environment = getEnvironmentFromUrl(baseApiUrl);
    this.iframeDomain = IFRAME_DOMAIN_MAP[environment];
    this.instanceId = crypto.randomUUID();
    this.debug = Boolean(debug);
    this.logger.setLogLevel(this.debug ? "DEBUG" : "INFO");
    this.initialize();
  }
};
DynamicWalletClient.iframeLoadPromise = null;
DynamicWalletClient.sharedIframe = null;
DynamicWalletClient.iframeInstanceCount = 0;

// node_modules/@dynamic-labs/waas/utils/constants.js
var DEFAULT_BASE_API_URL = "https://app.dynamicauth.com";
var DEFAULT_BASE_MPC_RELAY_API_URL = "https://relay.dynamicauth.com";

// node_modules/@dynamic-labs/waas/src/DynamicWaasMixin.js
var withDynamicWaas = (BaseClass) => {
  class DynamicWaasMixin extends BaseClass {
    setGetAuthTokenFunction(getAuthToken) {
      this.getAuthToken = getAuthToken;
    }
    setEnvironmentId(environmentId) {
      this.environmentId = environmentId;
    }
    setBaseApiUrl(baseApiUrl) {
      this.baseApiUrl = baseApiUrl;
    }
    setRelayUrl(relayUrl) {
      this.relayUrl = relayUrl;
    }
    setGetSignedSessionIdFunction(getSignedSessionId) {
      this.getSignedSessionId = getSignedSessionId;
    }
    constructor(...args) {
      super(...args);
      this.name = "Dynamic Waas";
      this.overrideKey = "dynamicwaas";
      this.isEmbeddedWallet = true;
      const { connectedChain } = this;
      const chainNameMap = {
        EVM: "EVM",
        SOL: "SVM",
        SUI: "SUI"
      };
      const chainName = chainNameMap[connectedChain];
      if (!chainName) {
        throw new Error(`Unsupported chain: ${connectedChain}`);
      }
      this.chainName = chainName;
    }
    createDynamicWaasClient() {
      var _a2;
      const authToken = (_a2 = this.getAuthToken) === null || _a2 === void 0 ? void 0 : _a2.call(this);
      if (!authToken) {
        throw new Error("Auth token is required");
      }
      if (!this.environmentId) {
        throw new Error("Environment ID is required");
      }
      return new DynamicWalletClient({
        authToken,
        baseApiUrl: this.baseApiUrl || DEFAULT_BASE_API_URL,
        baseMPCRelayApiUrl: this.relayUrl || DEFAULT_BASE_MPC_RELAY_API_URL,
        chainName: this.chainName,
        environmentId: this.environmentId
      });
    }
    getWaasWalletClient() {
      if (!this.dynamicWaasClient) {
        this.dynamicWaasClient = this.createDynamicWaasClient();
      }
      return this.dynamicWaasClient;
    }
  }
  return DynamicWaasMixin;
};

// node_modules/@dynamic-labs/waas/package.js
var version4 = "4.20.9";

// node_modules/@dynamic-labs/waas/src/index.js
assertPackageVersion("@dynamic-labs/waas", version4);

export {
  require_buffer,
  ApiKeyStamper,
  TurnkeyClient,
  TurnkeyActivityError,
  TurnkeyActivityConsensusNeededError,
  assertActivityCompleted,
  assertNonNull,
  TURNKEY_SDK_SESSION_KEY_RETRYABLE_ERRORS,
  logger,
  IframeStamper,
  WebauthnStamper,
  TurnkeyWalletConnectorBase,
  TurnkeyWalletConnectorInfo,
  findTurnkeyVerifiedCredentials,
  findTurnkeyVerifiedCredentialsWithSmartWalletRef,
  withDynamicWaas,
  validate_default2 as validate_default,
  v4_default2 as v4_default,
  esm_browser_exports,
  init_esm_browser
};
/*! Bundled license information:

@vue/shared/dist/shared.esm-bundler.js:
  (**
  * @vue/shared v3.5.17
  * (c) 2018-present Yuxi (Evan) You and Vue contributors
  * @license MIT
  **)
  (*! #__NO_SIDE_EFFECTS__ *)

@vue/reactivity/dist/reactivity.esm-bundler.js:
  (**
  * @vue/reactivity v3.5.17
  * (c) 2018-present Yuxi (Evan) You and Vue contributors
  * @license MIT
  **)
*/
//# sourceMappingURL=chunk-5XQK6ULP.js.map
