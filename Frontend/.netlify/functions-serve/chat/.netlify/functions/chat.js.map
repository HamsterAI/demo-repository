{
  "version": 3,
  "sources": ["../../../../../../Users/sun/Solana/solana_Aimax/HamsterAI/demo-repository/Frontend/.netlify/functions/chat.js"],
  "sourceRoot": "/var/folders/nf/pg3j8_nj5vzfr1cz_m6sr2pm0000gn/T/tmp-58441-YhzCr1xAtxhk",
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handler = void 0;\n// \u6295\u8D44\u610F\u56FE\u8BC6\u522B\u7CFB\u7EDF\u63D0\u793A\u8BCD\n// \u8FD9\u4E2A\u63D0\u793A\u8BCD\u6307\u5BFCAI\u5982\u4F55\u89E3\u6790\u7528\u6237\u7684\u6295\u8D44\u6307\u4EE4\u5E76\u8FD4\u56DE\u7ED3\u6784\u5316\u7684JSON\u683C\u5F0F\u7ED3\u679C\nconst INVESTMENT_SYSTEM_PROMPT = `You are a professional investment intent recognition AI assistant. Your task is to parse user investment instructions and return intent and entities in structured JSON format.\n\nPlease strictly return results in the following JSON format:\n{\n  \"intent\": \"investment intent type\",\n  \"entities\": {\n    \"amount\": \"investment amount (number)\",\n    \"percentage\": \"investment percentage (if any)\",\n    \"asset_type\": \"asset type\",\n    \"platform\": \"platform name (if specified)\",\n    \"chain\": \"blockchain network (if specified)\",\n    \"risk_level\": \"risk level\",\n    \"duration\": \"investment duration (if specified)\",\n    \"apy_requirement\": \"APY requirement (if specified)\"\n  },\n  \"confidence\": \"confidence level (number between 0-1)\",\n  \"reasoning\": \"parsing reasoning process\"\n}\n\nSupported investment intent types:\n- \"invest\": Investment instruction\n- \"rebalance\": Rebalance investment portfolio\n- \"withdraw\": Withdraw funds\n- \"query\": Query investment status\n- \"strategy\": Investment strategy advice\n- \"general\": General consultation\n\nSupported asset types:\n- \"RWA\": Real World Assets\n- \"DeFi\": Decentralized Finance\n- \"Staking\": Staking\n- \"Liquidity\": Liquidity Mining\n- \"Mixed\": Mixed Investment\n\nSupported blockchain networks:\n- \"Ethereum\": Ethereum\n- \"Solana\": Solana\n- \"Polygon\": Polygon\n- \"Cross-chain\": Cross-chain\n\nRisk levels:\n- \"Low\": Low risk\n- \"Medium\": Medium risk\n- \"High\": High risk\n\nExample:\nUser input: \"I want to invest 30% of my funds into high-yield RWA on Solana\"\nReturn:\n{\n  \"intent\": \"invest\",\n  \"entities\": {\n    \"percentage\": 30,\n    \"asset_type\": \"RWA\",\n    \"chain\": \"Solana\",\n    \"risk_level\": \"Medium\"\n  },\n  \"confidence\": 0.9,\n  \"reasoning\": \"User clearly expressed investment intent, specified 30% percentage, Solana chain and RWA asset type\"\n}\n\nPlease only return JSON format results, do not include other text explanations.`;\n// Netlify Functions\u7684\u5904\u7406\u5668\u51FD\u6570\nconst handler = async (event) => {\n    // \u8BBE\u7F6ECORS\u5934\u90E8\uFF0C\u5141\u8BB8\u8DE8\u57DF\u8BF7\u6C42\n    const headers = {\n        'Access-Control-Allow-Origin': '*', // \u5141\u8BB8\u6240\u6709\u57DF\u540D\u8BBF\u95EE\n        'Access-Control-Allow-Headers': 'Content-Type', // \u5141\u8BB8Content-Type\u5934\u90E8\n        'Access-Control-Allow-Methods': 'POST, OPTIONS', // \u5141\u8BB8POST\u548COPTIONS\u65B9\u6CD5\n    };\n    // \u5904\u7406\u9884\u68C0\u8BF7\u6C42\uFF08OPTIONS\u65B9\u6CD5\uFF09\n    if (event.httpMethod === 'OPTIONS') {\n        return {\n            statusCode: 200,\n            headers,\n            body: '',\n        };\n    }\n    const apiKey = process.env.DEEPSEEK_API_KEY?.trim();\n    if (!apiKey) {\n        throw new Error('DeepSeek API key is missing in environment variables');\n    }\n    else\n        console.log('DeepSeek API key is set', { apiKey });\n    // \u53EA\u5141\u8BB8POST\u65B9\u6CD5\n    if (event.httpMethod !== 'POST') {\n        return {\n            statusCode: 405,\n            headers,\n            body: JSON.stringify({ error: 'Method not allowed' }),\n        };\n    }\n    try {\n        // \u89E3\u6790\u8BF7\u6C42\u4F53\uFF0C\u83B7\u53D6\u7528\u6237\u6D88\u606F\u548C\u804A\u5929\u5386\u53F2\n        const { message, chatHistory = [] } = JSON.parse(event.body || '{}');\n        // \u9A8C\u8BC1\u5FC5\u9700\u7684\u53C2\u6570\n        if (!message) {\n            return {\n                statusCode: 400,\n                headers,\n                body: JSON.stringify({ error: 'Message is required' }),\n            };\n        }\n        // \u6784\u5EFA\u53D1\u9001\u7ED9DeepSeek API\u7684\u6D88\u606F\u6570\u7EC4\n        // \u5305\u542B\u7CFB\u7EDF\u63D0\u793A\u8BCD\u3001\u804A\u5929\u5386\u53F2\u548C\u5F53\u524D\u7528\u6237\u6D88\u606F\n        const messages = [\n            { role: 'system', content: INVESTMENT_SYSTEM_PROMPT }, // \u7CFB\u7EDF\u63D0\u793A\u8BCD\n            // \u5C06\u804A\u5929\u5386\u53F2\u8F6C\u6362\u4E3AAPI\u683C\u5F0F\n            ...chatHistory.map((msg) => ({\n                role: msg.sender === 'user' ? 'user' : 'assistant',\n                content: msg.content\n            })),\n            { role: 'user', content: message } // \u5F53\u524D\u7528\u6237\u6D88\u606F\n        ];\n        // \u8C03\u7528DeepSeek API\n        const response = await fetch('https://api.deepseek.com/chat/completions', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${apiKey}`, // \u4F7F\u7528\u73AF\u5883\u53D8\u91CF\u4E2D\u7684API\u5BC6\u94A5\n            },\n            body: JSON.stringify({\n                model: 'deepseek-chat', // \u4F7F\u7528DeepSeek\u804A\u5929\u6A21\u578B\n                messages: messages, // \u53D1\u9001\u6784\u5EFA\u7684\u6D88\u606F\u6570\u7EC4\n                temperature: 0.1, // \u8F83\u4F4E\u7684\u6E29\u5EA6\u503C\u786E\u4FDD\u66F4\u4E00\u81F4\u7684\u7ED3\u6784\u5316\u8F93\u51FA\n                max_tokens: 1000, // \u9650\u5236\u6700\u5927\u8F93\u51FAtoken\u6570\u91CF\n            }),\n        });\n        // \u68C0\u67E5API\u54CD\u5E94\u72B6\u6001\n        if (!response.ok) {\n            throw new Error(`DeepSeek API error: ${response.status}`);\n        }\n        // \u89E3\u6790API\u54CD\u5E94\n        const data = await response.json();\n        const aiResponse = data.choices[0].message.content;\n        // \u5C1D\u8BD5\u89E3\u6790AI\u8FD4\u56DE\u7684JSON\u683C\u5F0F\u6295\u8D44\u610F\u56FE\n        let parsedIntent = null;\n        try {\n            parsedIntent = JSON.parse(aiResponse);\n        }\n        catch (e) {\n            // \u5982\u679C\u89E3\u6790\u5931\u8D25\uFF0C\u8BB0\u5F55\u8B66\u544A\u4F46\u4E0D\u4E2D\u65AD\u6D41\u7A0B\n            console.warn('Failed to parse AI response as JSON:', aiResponse);\n        }\n        // \u8FD4\u56DE\u6210\u529F\u54CD\u5E94\uFF0C\u5305\u542BAI\u56DE\u590D\u3001\u89E3\u6790\u7684\u610F\u56FE\u548C\u4F7F\u7528\u7EDF\u8BA1\n        return {\n            statusCode: 200,\n            headers,\n            body: JSON.stringify({\n                response: aiResponse, // AI\u7684\u539F\u59CB\u56DE\u590D\n                intent: parsedIntent, // \u89E3\u6790\u51FA\u7684\u6295\u8D44\u610F\u56FE\uFF08\u5982\u679C\u6210\u529F\uFF09\n                usage: data.usage, // API\u4F7F\u7528\u7EDF\u8BA1\u4FE1\u606F\n            }),\n        };\n    }\n    catch (error) {\n        // \u9519\u8BEF\u5904\u7406\uFF1A\u8BB0\u5F55\u9519\u8BEF\u5E76\u8FD4\u56DE500\u72B6\u6001\u7801\n        console.error('Error in chat function:', error);\n        return {\n            statusCode: 500,\n            headers,\n            body: JSON.stringify({\n                error: 'Internal server error',\n                details: error instanceof Error ? error.message : 'Unknown error'\n            }),\n        };\n    }\n};\nexports.handler = handler;\n"],
  "mappings": ";;;AACA,OAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,QAAQ,UAAU;AAGlB,IAAM,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8DjC,IAAM,UAAU,OAAO,UAAU;AAE7B,QAAM,UAAU;AAAA,IACZ,+BAA+B;AAAA;AAAA,IAC/B,gCAAgC;AAAA;AAAA,IAChC,gCAAgC;AAAA;AAAA,EACpC;AAEA,MAAI,MAAM,eAAe,WAAW;AAChC,WAAO;AAAA,MACH,YAAY;AAAA,MACZ;AAAA,MACA,MAAM;AAAA,IACV;AAAA,EACJ;AACA,QAAM,SAAS,QAAQ,IAAI,kBAAkB,KAAK;AAClD,MAAI,CAAC,QAAQ;AACT,UAAM,IAAI,MAAM,sDAAsD;AAAA,EAC1E;AAEI,YAAQ,IAAI,2BAA2B,EAAE,OAAO,CAAC;AAErD,MAAI,MAAM,eAAe,QAAQ;AAC7B,WAAO;AAAA,MACH,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC;AAAA,IACxD;AAAA,EACJ;AACA,MAAI;AAEA,UAAM,EAAE,SAAS,cAAc,CAAC,EAAE,IAAI,KAAK,MAAM,MAAM,QAAQ,IAAI;AAEnE,QAAI,CAAC,SAAS;AACV,aAAO;AAAA,QACH,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,OAAO,sBAAsB,CAAC;AAAA,MACzD;AAAA,IACJ;AAGA,UAAM,WAAW;AAAA,MACb,EAAE,MAAM,UAAU,SAAS,yBAAyB;AAAA;AAAA;AAAA,MAEpD,GAAG,YAAY,IAAI,CAAC,SAAS;AAAA,QACzB,MAAM,IAAI,WAAW,SAAS,SAAS;AAAA,QACvC,SAAS,IAAI;AAAA,MACjB,EAAE;AAAA,MACF,EAAE,MAAM,QAAQ,SAAS,QAAQ;AAAA;AAAA,IACrC;AAEA,UAAM,WAAW,MAAM,MAAM,6CAA6C;AAAA,MACtE,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,gBAAgB;AAAA,QAChB,iBAAiB,UAAU,MAAM;AAAA;AAAA,MACrC;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACjB,OAAO;AAAA;AAAA,QACP;AAAA;AAAA,QACA,aAAa;AAAA;AAAA,QACb,YAAY;AAAA;AAAA,MAChB,CAAC;AAAA,IACL,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AACd,YAAM,IAAI,MAAM,uBAAuB,SAAS,MAAM,EAAE;AAAA,IAC5D;AAEA,UAAM,OAAO,MAAM,SAAS,KAAK;AACjC,UAAM,aAAa,KAAK,QAAQ,CAAC,EAAE,QAAQ;AAE3C,QAAI,eAAe;AACnB,QAAI;AACA,qBAAe,KAAK,MAAM,UAAU;AAAA,IACxC,SACO,GAAG;AAEN,cAAQ,KAAK,wCAAwC,UAAU;AAAA,IACnE;AAEA,WAAO;AAAA,MACH,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACjB,UAAU;AAAA;AAAA,QACV,QAAQ;AAAA;AAAA,QACR,OAAO,KAAK;AAAA;AAAA,MAChB,CAAC;AAAA,IACL;AAAA,EACJ,SACO,OAAO;AAEV,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,WAAO;AAAA,MACH,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACjB,OAAO;AAAA,QACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,MACtD,CAAC;AAAA,IACL;AAAA,EACJ;AACJ;AACA,QAAQ,UAAU;",
  "names": []
}
